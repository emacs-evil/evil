{
  "evil-find-file-at-point-visual": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find the filename selected by the visual region.\n    Returns an error message if the file does not exist.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-Y-yank-to-eol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `Y' yanks to the end of the line.\nThe default behavior is to yank the whole line, like Vim.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-rotate": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "In Visual Block selection, put point in CORNER.\nCorner may be one of `upper-left', `upper-right', `lower-left'\nand `lower-right':\n\n        upper-left +---+ upper-right\n                   |   |\n        lower-left +---+ lower-right\n\nWhen called interactively, the selection is rotated blockwise.",
    "arglist": [
      "corner",
      "&optional",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exit-visual-and-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exit insert state and repeat event.\nThis special command should be used if some command called from\nvisual state should actually be called in normal-state.  The main\nreason for doing this is that the repeat system should *not*\nrecord the visual state information for some command.  This\ncommand should be bound to exactly the same event in visual state\nas the original command is bound in normal state.  EVENT is the\nevent that triggered the execution of this command.",
    "arglist": [
      "event"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-current-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The buffer from which the command line window was called.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-selection-for-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a Visual selection for TYPE.",
    "arglist": [
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-global-inverted": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex vglobal command.\n[BEG,END]vglobal/PATTERN/COMMAND",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "pattern",
      "command",
      "invert"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-move-far-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Closes the current window, splits the lower-right one vertically\nand redisplays the current buffer there.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-without-input-method-hooks": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute body with evil's activate/deactivate-input-method hooks deactivated.\n\nThis allows input methods to be used in normal-state.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-emacs-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-move-very-bottom": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Closes the current window, splits the lower-right one horizontally\nand redisplays the current buffer there.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-move": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "A wrapper for line motions which conserves the column.\nSignals an error at buffer boundaries unless NOERROR is non-nil.",
    "arglist": [
      "count",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-an-object": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return an outer text object range of COUNT objects.\nIf COUNT is positive, return objects following point; if COUNT is\nnegative, return objects preceding point.  If one is unspecified,\nthe other is used with a negative argument.  THING is a symbol\nunderstood by thing-at-point.  BEG, END and TYPE specify the\ncurrent selection.  If LINE is non-nil, the text object should be\nlinewise, otherwise it is character wise.",
    "arglist": [
      "thing",
      "beg",
      "end",
      "type",
      "count",
      "&optional",
      "line"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-text-objects-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for inner text objects.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-inner-symbol": "o",
      "evil-inner-tag": "t",
      "evil-inner-back-quote": "`",
      "evil-inner-double-quote": "\"",
      "evil-inner-single-quote": "'",
      "evil-inner-angle": ">",
      "evil-inner-angle": ">",
      "evil-inner-curly": "}",
      "evil-inner-curly": "}",
      "evil-inner-curly": "}",
      "evil-inner-bracket": "]",
      "evil-inner-bracket": "]",
      "evil-inner-paren": ")",
      "evil-inner-paren": ")",
      "evil-inner-paren": ")",
      "evil-inner-paragraph": "p",
      "evil-inner-sentence": "s",
      "evil-inner-WORD": "W",
      "evil-inner-word": "w"
    }
  },
  "evil-ex-current-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the line number of the current line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-newline-commands": {
    "default": "(LaTeX-section TeX-font)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Commands excluding the trailing newline of a Visual Line selection.\nThese commands work better without this newline.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-insertion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last piece of inserted text.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-line-to-center": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls line number COUNT (or the cursor line) to the center of the window.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-undo-entry": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Information about the latest undo entry in the buffer.\nThis should be a pair (OBJ . CONS) where OBJ is the entry as an\nobject, and CONS is a copy of the entry.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-top": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to line COUNT from the top of the window.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-word-0": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-word-0'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-word-1": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-word-1'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-minor-mode-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Similar to `evil-define-key' but the bindings are associated\nwith the minor-mode symbol MODE instead of a particular map.\nAssociating bindings with a mode symbol instead of a map allows\nevil to use Emacs' built-in mechanisms to enable the bindings\nautomatically when MODE is active without relying on calling\n`evil-normalize-keymaps'. Another less significant difference is\nthat the bindings can be created immediately, because this\nfunction only uses the symbol MODE and does not rely on its\nvalue.\n\nSee `evil-define-key' for the usage of STATE, KEY, DEF and\nBINDINGS.",
    "arglist": [
      "state",
      "mode",
      "key",
      "def",
      "&rest",
      "bindings"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-ex-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Called to record a search command.\nFLAG is either 'pre or 'post if the function is called before\nresp.  after executing the command.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-maybe-remove-spaces": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Flag to determine if newly inserted spaces should be removed.\nSee the function `evil-maybe-remove-spaces'.",
    "fn-docstring": "Remove space from newly opened empty line.\nThis function removes (indentation) spaces that have been\ninserted by opening a new empty line. The behavior depends on the\nvariable `evil-maybe-remove-spaces'. If this variable is nil the\nfunction does nothing. Otherwise the behavior depends on\nDO-REMOVE.  If DO-REMOVE is non-nil the spaces are\nremoved. Otherwise `evil-maybe-remove-spaces' is set to nil\nunless the last command opened yet another new line.\n\nThis function should be added as a post-command-hook to track\ncommands opening a new line.",
    "arglist": [
      "&optional",
      "do-remove"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-get-jumps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "struct"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--self-insert-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Insert STRING as if typed interactively.",
    "arglist": [
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inhibit-operator-value": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "This variable is used to transfer the value\nof `evil-inhibit-operator' from one local scope to another.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-x-select-timer": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Timer for updating the X selection in visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-lookup-func": {
    "default": "woman",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Lookup function used by \"\\<evil-motion-state-map>\\[evil-lookup]\".",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-narrow-to-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Narrow BODY to the current line.\nBODY will signal the errors 'beginning-of-line or 'end-of-line\nupon reaching the beginning or end of the current line.\n\n(fn [[KEY VAL]...] BODY...)",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-space": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-lookup-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns non-nil value if KEY is bound in MAP.",
    "arglist": [
      "map",
      "key"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-upcase-first": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return STR with the first letter upcased.",
    "arglist": [
      "str"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-repeat-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Record insertion keys in `evil-insert-repeat-info'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-vsplit-window-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil vertically split windows with are created to the right.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-respect-visual-line-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether movement commands respect `visual-line-mode'.\nIf non-nil, `visual-line-mode' is generally respected when it is\non.  In this case, motions such as \\[evil-next-line] and\n\\[evil-previous-line] navigate by visual lines (on the screen) rather\nthan \"physical\" lines (defined by newline characters).  If nil,\nthe setting of `visual-line-mode' is ignored.\n\nThis variable must be set before Evil is loaded.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last substitute pattern.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-abbrev-expand-on-insert-exit": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil abbrevs will be expanded when leaving insert state\nlike in Vim, if `abbrev-mode' is on.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute FORM when CONDITION becomes true, checking with HOOK.\nNAME specifies the name of the entry added to HOOK. If APPEND is\nnon-nil, the entry is appended to the hook. If LOCAL is non-nil,\nthe buffer-local value of HOOK is modified.",
    "arglist": [
      "condition",
      "form",
      "hook",
      "&optional",
      "append",
      "local",
      "name"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jump-item": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find the next item in this line after or under the cursor\nand jump to the corresponding one.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-block-handler": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Inserts the current text as block.",
    "arglist": [
      "lines"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-apply-on-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Call FUNC for each line of a block selection.\nThe selection is specified by the region BEG and END.  FUNC must\ntake at least two arguments, the beginning and end of each\nline. If PASS-COLUMNS is non-nil, these values are the columns,\notherwise tey are buffer positions. Extra arguments to FUNC may\nbe passed via ARGS.",
    "arglist": [
      "func",
      "beg",
      "end",
      "pass-columns",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-replacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last substitute replacement.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the line number of BASE plus OFFSET.",
    "arglist": [
      "base",
      "&optional",
      "offset"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start command window with ex history and current minibuffer content.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Complete to the nearest following word.\nSearch backward if a match isn't found.\nCalls `evil-complete-next-func'.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-up-xml-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of balanced xml tags.\nOPEN and CLOSE should be characters identifying the opening and\nclosing parenthesis, respectively. If COUNT is greater than zero\npoint is moved forward otherwise it is moved backwards. Whenever\nan opening delimiter is found the COUNT is increased by one, if a\nclosing delimiter is found the COUNT is decreased by one. The\nmotion stops when COUNT reaches zero. The match-data reflects the\nlast successful match (that caused COUNT to reach zero).",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-pattern-regex": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the regular expression of a search PATTERN.",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quote-simple": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-delete-backward-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Close the minibuffer if it is empty.\nOtherwise behaves like `delete-backward-char'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-filter-list": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete by side-effect all items satisfying PREDICATE in LIST.\nStop when reaching POINTER.  If the first item satisfies PREDICATE,\nthere is no way to remove it by side-effect; therefore, write\n(setq foo (evil-filter-list 'predicate foo)) to be sure of\nchanging the value of `foo'.",
    "arglist": [
      "predicate",
      "list",
      "&optional",
      "pointer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode-off-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Closes the current window, current frame, Emacs.\nIf the current frame belongs to some client the client connection\nis closed.",
    "arglist": [
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the next COUNT'th occurrence of CHAR.\nMovement is restricted to the current line unless `evil-cross-lines' is non-nil.",
    "arglist": [
      "&optional",
      "count",
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines down.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-parser": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as a SYMBOL in GRAMMAR.\nIf GREEDY is non-nil, the whole of STRING must match.\nIf the parse succeeds, the return value is a cons cell\n(RESULT . TAIL), where RESULT is a parse tree and TAIL is\nthe remainder of STRING. Otherwise, the return value is nil.\n\nGRAMMAR is an association list of symbols and their definitions.\nA definition is either a list of production rules, which are\ntried in succession, or a #'-quoted function, which is called\nto parse the input.\n\nA production rule can be one of the following:\n\n    nil matches the empty string.\n    A regular expression matches a substring.\n    A symbol matches a production for that symbol.\n    (X Y) matches X followed by Y.\n    (\\? X) matches zero or one of X.\n    (* X) matches zero or more of X.\n    (+ X) matches one or more of X.\n    (& X) matches X, but does not consume.\n    (! X) matches anything but X, but does not consume.\n\nThus, a simple grammar may look like:\n\n    ((plus \"\\\\+\")           ; plus <- \"+\"\n     (minus \"-\")            ; minus <- \"-\"\n     (operator plus minus)) ; operator <- plus / minus\n\nAll input-consuming rules have a value. A regular expression evaluates\nto the text matched, while a list evaluates to a list of values.\nThe value of a list may be overridden with a semantic action, which is\nspecified with a #'-quoted expression at the end:\n\n    (X Y #'foo)\n\nThe value of this rule is the result of calling foo with the values\nof X and Y as arguments. Alternatively, the function call may be\nspecified explicitly:\n\n    (X Y #'(foo $1 $2))\n\nHere, $1 refers to X and $2 refers to Y. $0 refers to the whole list.\nDollar expressions can also be used directly:\n\n    (X Y #'$1)\n\nThis matches X followed by Y, but ignores the value of Y;\nthe value of the list is the same as the value of X.\n\nIf the SYNTAX argument is non-nil, then all semantic actions\nare ignored, and a syntax tree is constructed instead. The\nsyntax tree obeys the property that all the leave nodes are\nparts of the input string. Thus, by traversing the syntax tree,\none can determine how each character was parsed.\n\nThe following symbols have reserved meanings within a grammar:\n`\\?', `*', `+', `&', `!', `function', `alt', `seq' and nil.",
    "arglist": [
      "string",
      "symbol",
      "grammar",
      "&optional",
      "greedy",
      "syntax"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-insert-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeation recording function for commands that insert text in region.\nFor example `mouse-yank-primary'. This records text insertion when a command\ninserts some text in a buffer between (point) and (mark).",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-expand-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Expand the region to the Visual selection.\nIf EXCLUDE-NEWLINE is non-nil and the selection ends with a newline,\nexclude that newline from the region.",
    "arglist": [
      "&optional",
      "exclude-newline"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-pre-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Prepare the current command for recording the repeation.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-make-overriding-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Give KEYMAP precedence over the global keymap of STATE.\nThe keymap will have lower precedence than custom STATE bindings.\nIf STATE is nil, give it precedence over all states.\nIf COPY is t, create a copy of KEYMAP and give that\nhigher precedence. See also `evil-make-intercept-map'.",
    "arglist": [
      "keymap",
      "&optional",
      "state",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-word-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th next word.\nIf BIGWORD is non-nil, move by WORDS.\n\nIf this command is called in operator-pending state it behaves\ndifferently. If point reaches the beginning of a word on a new\nline point is moved back to the end of the previous line.\n\nIf called after a change operator, i.e. cw or cW,\n`evil-want-change-word-to-end' is non-nil and point is on a word,\nthen both behave like ce or cE.\n\nIf point is at the end of the buffer and cannot be moved signal\n'end-of-buffer is raised.\n",
    "arglist": [
      "&optional",
      "count",
      "bigword"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-has-command-properties-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether Evil properties are defined for COMMAND.\nSee also `evil-has-command-property-p'.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-get-substitute-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns the substitution info of command line STRING.\nThis function returns a three-element list (PATTERN REPLACEMENT\nFLAGS) consisting of the substitution parts of STRING. PATTERN is\na ex-pattern (see `evil-ex-make-pattern') and REPLACEMENT in a\ncompiled replacement expression (see `evil-compile-replacement').\nThe information returned is the actual substitution information\nw.r.t. to special situations like empty patterns or repetition of\nprevious substitution commands. If IMPLICIT-R is non-nil, then\nthe flag 'r' is assumed, i.e. in the case of an empty pattern the\nlast search pattern is used. This will be used when called from\na :substitute command with arguments.",
    "arglist": [
      "string",
      "&optional",
      "implicit-r"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-interactive-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evaluate the interactive string STRING.\nThe string may contain extended interactive syntax.\nThe return value is a cons cell (FORM . PROPERTIES),\nwhere FORM is a single list-expression to be passed to\na standard `interactive' statement, and PROPERTIES is a\nlist of command properties as passed to `evil-define-command'.",
    "arglist": [
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be a movement function.\nThis ensures that it behaves correctly in visual state.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-digraphs": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-highlights": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the overlays of all active highlights.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--parse-delmarks": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Where TO-BE-PARSED can contain ranges in the form `x-y'.\nPARSED is a list of characters whose marks should be deleted.\nLike vim, on invalid input, preceeding valid input is still parsed.",
    "arglist": [
      "to-be-parsed",
      "&optional",
      "parsed"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-keymap-alists": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate keymap association lists, removing duplicates.\nA keymap alist is a list of cons cells (VAR . MAP) where each keymap\nmay occur only once, but where the variables may be repeated\n(e.g., (VAR . MAP1) (VAR . MAP2) is allowed). The order matters,\nwith the highest priority keymaps being listed first.",
    "arglist": [
      "&rest",
      "sequences"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ret-gen": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "count",
      "indent?"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Starts a forward search.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-state": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The Evil state being switched to.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exit-visual-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exit from Visual state to the previous state.\nIf LATER is non-nil, exit after the current command.",
    "arglist": [
      "&optional",
      "later",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-open-brace": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] previous unmatched '{'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-suppress-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Full keymap disabling default bindings to `self-insert-command'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-define-cmd": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Binds the function FUNCTION to the command CMD.",
    "arglist": [
      "cmd",
      "function"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-pending-intercept-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "An alist of pending intercept maps.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-open-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] previous unmatched '('.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-previous-line-func": {
    "default": "(closure (dabbrev-case-distinction dabbrev-search-these-buffers-only t) (arg) (let ((hippie-expand-try-functions-list '(try-expand-line try-expand-line-all-buffers))) (hippie-expand arg)))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Minibuffer completion function used by \\<evil-insert-state-map>\\[evil-complete-previous-line].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-insert-at-point-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "beg",
      "end",
      "_length"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-jump": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "idx",
      "shift"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-set-overlays": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the list of active overlays of the highlight HL to OVERLAYS.",
    "arglist": [
      "hl",
      "overlays"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves whole lines into the kill-ring.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the type of OBJECT to TYPE.\nFor example, (evil-set-type 'next-line 'line)\nwill make `line' the type of the `next-line' command.",
    "arglist": [
      "object",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-refresh-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Refresh the cursor for STATE in BUFFER.\nBUFFER defaults to the current buffer.  If STATE is nil the\ncursor type is either `evil-force-cursor' or the current state.",
    "arglist": [
      "&optional",
      "state",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-savehist-sync": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Updates the printable value of window jumps for `savehist'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-up": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window and the cursor COUNT lines upwards.\nIf COUNT is not specified the function scrolls down\n`evil-scroll-count', which is the last used count.\nIf the scroll count is zero the command scrolls half the screen.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-enclose-ace-jump-for-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enclose ace-jump to make it suitable for motions.\nThis includes restricting `ace-jump-mode' to the current window\nin visual and operator state, deactivating visual updates, saving\nthe mark and entering `recursive-edit'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-scroll-count": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Holds last used prefix for `evil-scroll-up'\nand `evil-scroll-down'.\nDetermines how many lines should be scrolled.\nDefault value is 0 - scroll half the screen.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-flash-delay": {
    "default": 2,
    "local": null,
    "default-type": "integer",
    "var-docstring": "\\<evil-motion-state-map>\nTime in seconds to flash search matches after \\[evil-search-next] and \\[evil-search-previous].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition-semantic": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find definition for POSITION with semantic.",
    "arglist": [
      "_string",
      "position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-global-set-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Bind KEY to DEF in STATE.",
    "arglist": [
      "state",
      "key",
      "def"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-name": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the name of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-auto-balance-windows": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil window creation and deletion trigger rebalancing.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-line-handler": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Inserts the current text linewise.",
    "arglist": [
      "text"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-stop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Stop recording a repeat.\nUpdate `evil-repeat-ring' with the accumulated changes\nin `evil-repeat-info' and clear variables.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enter an Ex command.\nThe ex command line is initialized with the value of\nINITIAL-INPUT. If the command is called interactively the initial\ninput depends on the current state. If the current state is\nnormal state and no count argument is given then the initial\ninput is empty. If a prefix count is given the initial input is\n.,.+count. If the current state is visual state then the initial\ninput is the visual region '<,'> or `<,`>. If the value of the\nglobal variable `evil-ex-initial-input' is non-nil, its content\nis appended to the line.",
    "arglist": [
      "&optional",
      "initial-input"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-digraphs-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Table of default digraphs.\nThis includes all digraphs defined in RFC 1345,\nas well as miscellaneous digraphs for multi-byte characters.\nSee also `evil-digraphs-table-user'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-range-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set RANGE's end to END.\nIf COPY is non-nil, return a copy of RANGE.",
    "arglist": [
      "range",
      "end",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-symbol-1-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-symbol-1-below'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Specifications made by `evil-define-command'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-end-of-line-or-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the last character of the current screen\nline if `visual-line-mode' is active and\n`evil-respect-visual-line-mode' is non-nil.  If COUNT is given,\nmove COUNT - 1 screen lines downward first.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-command-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return all Evil properties of COMMAND.\nSee also `evil-get-command-property'.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-command-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace all of COMMAND's properties with PROPERTIES.\nPROPERTIES should be a property list.\nThis erases all previous properties; to only add properties,\nuse `evil-set-command-property'.",
    "arglist": [
      "command",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-make-search-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Creates a PATTERN for search.\nThis function respects the values of `evil-ex-search-case'.",
    "arglist": [
      "regexp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-inner-object": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return an inner text object range of COUNT objects.\nIf COUNT is positive, return objects following point; if COUNT is\nnegative, return objects preceding point.  If one is unspecified,\nthe other is used with a negative argument.  THING is a symbol\nunderstood by thing-at-point.  BEG, END and TYPE specify the\ncurrent selection.  If LINE is non-nil, the text object should be\nlinewise, otherwise it is character wise.",
    "arglist": [
      "thing",
      "beg",
      "end",
      "type",
      "&optional",
      "count",
      "line"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-loop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Loop with countdown variable.\nEvaluate BODY with VAR counting down from COUNT to 0.\nCOUNT can be negative, in which case VAR counts up instead.\nThe return value is the value of VAR when the loop\nterminates, which is 0 if the loop completes successfully.\nRESULT specifies a variable for storing this value.\n\n(fn (VAR COUNT [RESULT]) BODY...)",
    "arglist": [
      "spec",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-default-state": {
    "default": "normal",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The default Evil state.\nThis is the state a buffer starts in when it is not otherwise\nconfigured (see `evil-set-initial-state' and\n`evil-buffer-regexps').  The value may be one of `normal',\n`insert', `visual', `replace', `operator', `motion' and `emacs'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-next-minibuffer-func": {
    "default": "minibuffer-complete",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Minibuffer completion function used by \\<evil-insert-state-map>\\[evil-complete-next].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-marker": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return MARKER's line number in the current buffer.\nSignal an error if MARKER is in a different buffer.",
    "arglist": [
      "marker"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-motion-count": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Current motion count.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-char-2": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char-2'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jump-backward-swap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the previous position in jump list.\nThe current position is placed in the jump list.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-previous-func": {
    "default": "(closure (dabbrev-case-distinction dabbrev-search-these-buffers-only t) (arg) (require 'dabbrev) (let ((dabbrev-search-these-buffers-only (if evil-complete-all-buffers nil (list (current-buffer)))) dabbrev-case-distinction) (dabbrev-expand arg)))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Completion function used by \\<evil-insert-state-map>\\[evil-complete-previous].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-last-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the line number of the last line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--eval-expr": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Eval INPUT and return stringified result, if of a suitable type.\nIf INPUT starts with a number, +, -, or . use `calc-eval' instead.",
    "arglist": [
      "input"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hook run after entering or leaving `evil-local-mode'.\nNo problems result if this variable is not bound.\n`add-hook' automatically binds it.  (This is true for all hook variables.)",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-update-insert-state-bindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update bindings in `evil-insert-state-map'.\nIf no arguments are given add the bindings specified in\n`evil-insert-state-bindings'. If REMOVE is non nil, remove only\nthese bindings. Unless FORCE is non nil, this will not\noverwriting existing bindings, which means bindings will not be\nadded if one already exists for a key and only default bindings\nare removed.\n\nNote that <delete>, <escape> and `evil-toggle-key' are not\nincluded in `evil-insert-state-bindings' by default.",
    "arglist": [
      "&optional",
      "_option-name",
      "remove",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-word-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search forward for symbol under point.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-interactive-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of Evil-specific interactive codes.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define an Evil state STATE.\nDOC is a general description and shows up in all docstrings;\nthe first line of the string should be the full name of the state.\n\nBODY is executed each time the state is enabled or disabled.\n\nOptional keyword arguments:\n- `:tag' - the mode line indicator, e.g. \"<T>\".\n- `:message' - string shown in the echo area when the state is\n  activated.\n- `:cursor' - default cursor specification.\n- `:enable' - list of other state keymaps to enable when in this\n  state.\n- `:entry-hook' - list of functions to run when entering this state.\n- `:exit-hook' - list of functions to run when exiting this state.\n- `:suppress-keymap' - if non-nil, effectively disables bindings to\n  `self-insert-command' by making `evil-suppress-map' the parent of\n  the global state keymap.\n\nThe global keymap of this state will be `evil-test-state-map',\nthe local keymap will be `evil-test-state-local-map', and so on.\n\n(fn STATE DOC [[KEY VAL]...] BODY...)",
    "arglist": [
      "state",
      "doc",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-operator-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-max": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the maximal buffer position of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-signal-at-bob-or-eob": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Signals error if `point' is at boundaries.\nIf `point' is at bob and COUNT is negative this function signal\n'beginning-of-buffer. If `point' is at eob and COUNT is positive\nthis function singal 'end-of-buffer. This function should be used\nin motions. COUNT defaults to 1.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-previous-mark": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The position of mark before Visual state, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-modes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Modes that should come up in Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-beginning-of-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the first character of the current screen line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-justify-lines": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Justifes all lines in a range.\nBEG and END specify the range of those lines to be\njustified. JUSTIFY is either 'left, 'right or 'center according\nto the justification type. POSITION is the maximal text width for\nright and center justification or the column at which the lines\nshould be left-aligned for left justification.",
    "arglist": [
      "beg",
      "end",
      "justify",
      "position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-intercept-esc": {
    "default": "always",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether Evil should intercept the escape key.\nIn the terminal, escape and a meta key sequence both generate the\nsame event.  In order to distingush these, Evil uses\n`input-decode-map'.  It is not necessary to do this in a graphical\nEmacs session.  However, if you prefer to use `C-[' as escape (which\nis identical to the terminal escape key code), this interception must\nalso happen in graphical Emacs sessions.  Set this variable to\n`always', t (only in the terminal) or nil (never intercept).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeation for motions. Motions are recorded by keystroke but only in insert state.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-min": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the minimal buffer position of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--next-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to next lowercase mark.\nMove forward if FORWARDP is truthy or backward if falsey.\nLoop back to the top of buffer if the end is reached.",
    "arglist": [
      "forwardp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-match": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace text match by last search with REPLACEMENT.\nIf REPLACEMENT is an expression it will be evaluated to compute\nthe replacement text, otherwise the function behaves as\n`replace-match'.",
    "arglist": [
      "replacement",
      "&optional",
      "fixedcase",
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-find-char-reverse": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the last find COUNT times in the opposite direction.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-init-shell-argument-completion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Prepares the current minibuffer for completion of shell commands.\nThis function must be called from the :runner function of some\nargument handler that requires shell completion.",
    "arglist": [
      "flag",
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-global": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil substitute patterns are global by default.\nUsually (if this variable is nil) a substitution works only on\nthe first match of a pattern in a line unless the 'g' flag is\ngiven, in which case the substitution happens on all matches in a\nline. If this option is non-nil, this behaviour is reversed: the\nsubstitution works on all matches unless the 'g' pattern is\nspecified, then is works only on the first match.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The current Evil state.\nTo change the state, use `evil-change-state'\nor call the state function (e.g., `evil-normal-state').",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The position of `point' when the ex command has been called.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-and-close": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the current buffer and closes the window.",
    "arglist": [
      "file",
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-first-non-blank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the first non-blank character of the current line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-line-number": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Print the last line number.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search forward for user-entered text.\nSearches for regular expression if `evil-regexp-search' is t.\n\nBelow is the documentation string for `isearch-forward',\nwhich lists available keys:\n\nDo incremental search forward.\nWith a prefix argument, do an incremental regular expression search instead.\n\nAs you type characters, they add to the search string and are found.\nThe following non-printing keys are bound in ‘isearch-mode-map’.\n\nType DEL to cancel last input item from end of search string.\nType RET to exit, leaving point at location found.\nType LFD (C-j) to match end of line.\nType C-s to search again forward, C-r to search again backward.\nType M-s M-< to go to the first match, M-s M-> to go to the last match.\nType C-w to yank next word or character in buffer\n  onto the end of the search string, and search for it.\nType C-M-d to delete character from end of search string.\nType C-M-y to yank char from buffer onto end of search string and search for it.\nType C-M-z to yank from point until the next instance of a\n specified character onto end of search string and search for it.\nType M-s C-e to yank rest of line onto end of search string and search for it.\nType C-y to yank the last string of killed text.\nType M-y to replace string just yanked into search prompt\n with string killed before it.\nType C-q to quote control character to search for it.\nType C-x 8 RET to add a character to search by Unicode name, with completion.\nC-g while searching or when search has failed cancels input back to what has\n been found successfully.\nC-g when search is successful aborts and moves point to starting point.\n\nIf you try to exit with the search string still empty, it invokes\n nonincremental search.\n\nType M-s c to toggle search case-sensitivity.\nType M-s i to toggle search in invisible text.\nType M-s r to toggle regular-expression mode.\nType M-s w to toggle word mode.\nType M-s _ to toggle symbol mode.\nType M-s ' to toggle character folding.\n\nType M-s SPC to toggle whitespace matching.\nIn incremental searches, a space or spaces normally matches any whitespace\ndefined by the variable ‘search-whitespace-regexp’; see also the variables\n‘isearch-lax-whitespace’ and ‘isearch-regexp-lax-whitespace’.\n\nType M-s e to edit the search string in the minibuffer.\n\nAlso supported is a search ring of the previous 16 search strings.\nType M-n to search for the next item in the search ring.\nType M-p to search for the previous item in the search ring.\nType C-M-i to complete the search string using the search ring.\n\nType M-% to run ‘query-replace’ with string to replace from last search string.\nType C-M-% to run ‘query-replace-regexp’ with the last search string.\nType M-s o to run ‘occur’ that shows the last search string.\nType M-s h r to run ‘highlight-regexp’ that highlights the last search string.\nType M-s h l to run ‘highlight-lines-matching-regexp’ that highlights lines\n matching the last search string.\n\nType C-h b to display all Isearch key bindings.\nType C-h k to display documentation of Isearch key.\nType C-h m to display documentation of Isearch mode.\n\nIf an input method is turned on in the current buffer, that input\nmethod is also active while you are typing characters to search.\nTo toggle the input method, type C-\\.  It also toggles the input\nmethod in the current buffer.\n\nTo use a different input method for searching, type C-^,\nand specify an input method you want to use.\n\nTo activate a transient input method, type C-x \\.\n\nThe above keys, bound in ‘isearch-mode-map’, are often controlled by\n options; do M-x apropos on search-.* to find them.\nOther control and meta characters terminate the search\n and are then executed normally (depending on ‘search-exit-option’).\nLikewise for function keys and mouse button events.\n\nIf this function is called non-interactively with a nil NO-RECURSIVE-EDIT,\nit does not return to the calling function until the search is done.\nSee the function ‘isearch-mode’ for more information.\n\n(fn &optional REGEXP-P NO-RECURSIVE-EDIT)",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-wrap-ring-bell": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to ring the bell when search wraps around the buffer.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-swap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Swap the values of variables THIS and THAT.\nIf three or more arguments are given, the values are rotated.\nE.g., (evil-swap A B C) sets A to B, B to C, and C to A.",
    "arglist": [
      "this",
      "that",
      "&rest",
      "vars"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-delete-backward-char-and-join": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete previous character and join lines.\nIf point is at the beginning of a line then the current line will\nbe joined with the previous line if and only if\n`evil-backspace-join-lines'.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-WORD-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th previous WORD.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-search-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open a command line window for forward searches.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-exit-recursive-edit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exit a recursive edit caused by an evil jump.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-deactivate-input-method": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Disable input method in all states.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-to-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to column COLUMN in the current line.\nPlaces point at left of the tab character (at the right if DIR\nis non-nil) and returns point.",
    "arglist": [
      "column",
      "&optional",
      "dir",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-match-substitute-replacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return REPLACEMENT as it will be inserted by `evil-replace-match'.",
    "arglist": [
      "replacement",
      "&optional",
      "fixedcase",
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-call-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute the given command COMMAND.",
    "arglist": [
      "range",
      "command",
      "argument"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-block-corner": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Block corner corresponding to POINT, with MARK in opposite corner.\nDepending on POINT and MARK, the return value is `upper-left',\n`upper-right', `lower-left' or `lower-right':\n\n        upper-left +---+ upper-right\n                   |   |\n        lower-left +---+ lower-right\n\nOne-column or one-row blocks are ambiguous. In such cases,\nthe horizontal or vertical component of CORNER is used.\nCORNER defaults to `upper-left'.",
    "arglist": [
      "&optional",
      "corner",
      "point",
      "mark"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-align-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Left-align lines in the region at WIDTH columns.\nThe default for width is the value of `fill-column'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "width"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-join": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Join the selected lines with optional COUNT and BANG.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "count",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-close-folds": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Close all folds.\nSee also `evil-open-folds'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-WORD": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner WORD.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-match": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select previous match.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse--drag-set-mark-and-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "start",
      "click",
      "click-count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-completion-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Completion keymap for Ex.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "exit-minibuffer": "RET",
      "exit-minibuffer": "RET",
      "next-history-element": "<next>",
      "previous-history-element": "<prior>",
      "next-complete-history-element": "C-n",
      "previous-complete-history-element": "C-p",
      "forward-word": "M-f",
      "backward-word": "M-b",
      "abort-recursive-edit": "C-g",
      "backward-kill-word": "C-w",
      "quoted-insert": "C-v",
      "evil-delete-whole-line": "C-u",
      "next-complete-history-element": "C-n",
      "evil-paste-from-register": "C-r",
      "previous-complete-history-element": "C-p",
      "evil-ex-completion": "C-l",
      "evil-insert-digraph": "C-k",
      "abort-recursive-edit": "C-g",
      "evil-ex-command-window": "C-f",
      "evil-ex-completion": "C-l",
      "abort-recursive-edit": "C-g",
      "move-beginning-of-line": "C-b",
      "evil-ex-completion": "C-l",
      "evil-ex-completion": "C-l",
      "evil-ex-completion": "C-l",
      "evil-ex-completion": "C-l",
      "evil-ex-delete-backward-char": "DEL"
    }
  },
  "evil-define-key*": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a STATE binding from KEY to DEF for KEYMAP.\nSTATE is one of normal, insert, visual, replace, operator,\nmotion, emacs, or a list of one or more of these. Omitting a\nstate by using nil corresponds to a standard Emacs binding using\n`define-key' The remaining arguments are like those of\n`define-key'. For example:\n\n    (evil-define-key* 'normal foo-map \"a\" 'bar)\n\nThis creates a binding from \"a\" to bar in Normal state, which\nis active whenever foo-map is active. Using nil for the state,\nthe following are equivalent:\n\n    (evil-define-key* nil foo-map \"a\" 'bar)\n\n    (define-key foo-map \"a\" 'bar)\n\n It is possible to specify multiple states and/or bindings at\n once:\n\n    (evil-define-key* '(normal visual) foo-map\n      \"a\" 'bar\n      \"b\" 'foo)\n\nKEYMAP may also be a quoted symbol. If the symbol is global, the\nglobal evil keymap corresponding to the state(s) is used, meaning\nthe following are equivalent:\n\n    (evil-define-key* 'normal 'global \"a\" 'bar)\n\n    (evil-global-set-key 'normal \"a\" 'bar)\n\nThe symbol local may also be used, which corresponds to using\n`evil-local-set-key'.\n\nThe use is nearly identical to `evil-define-key' with the\nexception that this is a function and not a macro (and so will\nnot be expanded when compiled which can have unintended\nconsequences). `evil-define-key*' also does not defer any\nbindings like `evil-define-key' does using `evil-delay'. This\nallows errors in the bindings to be caught immediately, and makes\nits behavior more predictable.",
    "arglist": [
      "state",
      "keymap",
      "key",
      "def",
      "&rest",
      "bindings"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-record": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add INFO to the end of `evil-repeat-info'.",
    "arglist": [
      "info"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-indent-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Indent the line.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concatenate-interactive-forms": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate interactive list expressions FORMS.\nReturns a single expression where successive expressions\nare joined, if possible.",
    "arglist": [
      "&rest",
      "forms"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the marker specified by CHAR.",
    "arglist": [
      "char",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-last-cmd": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shift text from BEG to END to the left.\nThe text is shifted to the nearest multiple of `evil-shift-width'\n(the rounding can be disabled by setting `evil-shift-round').\nIf PRESERVE-EMPTY is non-nil, lines that contain only spaces are\nindented, too, otherwise they are ignored.  Location of point\nis preserved relative to text when called from insert state.\nOtherwise, it is determined by `evil-start-of-line' and/or `evil-track-eol'.\nSee also `evil-shift-right'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "count",
      "preserve-empty"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-range-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Beginning of `evil-operator-range'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the Visual selection as a range.\nThis is a list (BEG END TYPE PROPERTIES...), where BEG is the\nbeginning of the selection, END is the end of the selection,\nTYPE is the selection's type, and PROPERTIES is a property list\nof miscellaneous selection attributes.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find definition for STRING with evil-search.",
    "arglist": [
      "string",
      "_position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-sort": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex sort command.\n[BEG,END]sort[!] [i][u]\nThe following additional options are supported:\n\n  * i   ignore case\n  * u   remove duplicate lines\n\nThe 'bang' argument means to sort in reverse order.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "options",
      "reverse"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-change-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Record change information for current command.",
    "arglist": [
      "beg",
      "end",
      "length"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-flash-search-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Flash last search matches for duration of `evil-flash-delay'.\nIf ALL is non-nil, flash all matches. STRING is a message\nto display in the echo area.",
    "arglist": [
      "string",
      "&optional",
      "all"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition-xref": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find definition at POSITION with xref.",
    "arglist": [
      "_string",
      "position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-undo-pop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Undo the last buffer change.\nRemoves the last undo information from `buffer-undo-list'.\nIf undo is disabled in the current buffer, use the information\nin `evil-temporary-undo' instead.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The history for the search command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-search-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open a command line window for backward searches.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-symbol-word-search": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "If nil then * and # search for words otherwise for symbols.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transient-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Toggle Transient Mark mode.\nEnsure that the region is properly deactivated.\nEnable with positive ARG, disable with negative ARG.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to insert state at beginning of current line.\nPoint is placed at the first non-blank character on the current\nline.  The insertion will be repeated COUNT times.  If VCOUNT is\nnon nil it should be number > 0. The insertion will be repeated\nin the next VCOUNT - 1 lines below the current one.",
    "arglist": [
      "count",
      "&optional",
      "vcount"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-match-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the match-hook of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-mode-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for `evil-list-view-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-list-view-goto-entry": "<return>",
      "evil-list-view-goto-entry": "<return>",
      "evil-list-view-quit": "q"
    }
  },
  "evil-paste-clear-minibuffer-first": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "`evil-paste-before' cannot have `delete-minibuffer-contents' called before\nit fetches certain registers becuase this would trigger various ex-updates,\nsometimes moving point, so `C-a' `C-w' etc. would miss their intended target.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-cursor-color": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the cursor color to COLOR.",
    "arglist": [
      "color"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-contract": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Contract BEG and END as TYPE with PROPERTIES.\nReturns a list (BEG END TYPE PROPERTIES ...), where the tail\nmay contain a property list.",
    "arglist": [
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-change-whole-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change whole line.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-normal-keys": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The keys used to invoke the current `evil-execute-in-normal-state'.\nCan be used to detect if we are currently in that quasi-state.\nWith current bindings, it will be \\<evil-insert-state-map>\\[evil-execute-in-normal-state]",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-update-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the current search pattern.",
    "arglist": [
      "_beg",
      "_end",
      "_range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-properties": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Property list of miscellaneous Visual properties.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-copy-from-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Copy characters from preceding non-blank line.\nThe copied text is inserted before point.\nARG is the number of lines to move backward.\nSee also \\<evil-insert-state-map>\\[evil-copy-from-below].",
    "arglist": [
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-abort-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be nonrepeatable.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-update": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update Ex variables when the minibuffer changes.\nThis function is usually called from `after-change-functions'\nhook. If BEG is non-nil (which is the case when called from\n`after-change-functions'), then an error description is shown\nin case of incomplete or unknown commands.",
    "arglist": [
      "&optional",
      "beg",
      "end",
      "len",
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-in-comment-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Checks if POS is within a comment according to current syntax.\nIf POS is nil, (point) is used. The return value is the beginning\nposition of the comment.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-vim-style-regexp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil Vim-style backslash codes are supported in search patterns.\nSee `evil-transform-vim-style-regexp' for the supported backslash\ncodes.  Note that this only affects the search command if\n`evil-search-module' is set to 'evil-search. The isearch module\nalways uses plain Emacs regular expressions.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-line-to-top": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls line number COUNT (or the cursor line) to the top of the window.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-paragraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the end of the COUNT-th next paragraph.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-word-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the next occurrence of word under the cursor.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a mode-line tag for SELECTION.\nSELECTION is a kind of selection as defined by\n`evil-define-visual-selection', such as `char', `line'\nor `block'.",
    "arglist": [
      "&optional",
      "selection"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replacement-magic": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "All magic characters in a replacement string",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transform": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Apply TRANSFORM on BEG and END with PROPERTIES.\nReturns a list (BEG END TYPE PROPERTIES ...), where the tail\nmay contain a property list. If TRANSFORM is undefined,\nreturn positions unchanged.",
    "arglist": [
      "transform",
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute a motion and return the buffer positions.\nThe return value is a list (BEG END TYPE).",
    "arglist": [
      "motion",
      "&optional",
      "count",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-left-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shift the current line COUNT times to the left.\nThe text is shifted to the nearest multiple of\n`evil-shift-width'. Like `evil-shift-left' but always works on\nthe current line.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-maybe-expand-abbrev": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The explicit count when repeating a command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-overriding-keymap-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the state for the overriding keymap MAP.\nA return value of t means all states.",
    "arglist": [
      "map"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-range-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Type of `evil-operator-range'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-join": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Join the selected lines.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Insert state.\n(That is, whether `evil-state' is `insert'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cjk": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-eval-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for eval input.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "exit-minibuffer": "RET",
      "exit-minibuffer": "RET",
      "next-history-element": "<next>",
      "previous-history-element": "<prior>",
      "next-complete-history-element": "C-n",
      "previous-complete-history-element": "C-p",
      "forward-word": "M-f",
      "backward-word": "M-b",
      "abort-recursive-edit": "C-g",
      "backward-kill-word": "C-w",
      "quoted-insert": "C-v",
      "evil-delete-whole-line": "C-u",
      "next-complete-history-element": "C-n",
      "evil-paste-from-register": "C-r",
      "previous-complete-history-element": "C-p",
      "evil-insert-digraph": "C-k",
      "abort-recursive-edit": "C-g",
      "abort-recursive-edit": "C-g",
      "move-beginning-of-line": "C-b"
    }
  },
  "evil-with-active-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY with an active region from BEG to END.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-signal-without-movement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Catches errors provided point moves within this scope.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-a-symbol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a symbol.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-isearch-function": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a search function for use with isearch.\nBased on `isearch-regexp' and `isearch-forward'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-extract-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the key-sequence KEYS into prefix-argument and the rest.\nReturns the list (PREFIX CMD SEQ REST), where PREFIX is the\nprefix count, CMD the command to be executed, SEQ the subsequence\ncalling CMD, and REST is all remaining events in the\nkey-sequence. PREFIX and REST may be nil if they do not exist.\nIf a command is bound to some keyboard macro, it is expanded\nrecursively.",
    "arglist": [
      "keys"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-member-recursive-if": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find the first item satisfying PREDICATE in TREE.",
    "arglist": [
      "predicate",
      "tree"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-active-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the highlight with a certain NAME is active.",
    "arglist": [
      "name"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-beginning": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The beginning of the Visual selection, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-tree": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The syntax tree.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-binding": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns the final binding of COMMAND.",
    "arglist": [
      "command",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jump-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-normal-state": "<escape>",
      "evil-replace-backspace": "DEL",
      "mouse-yank-primary": "<mouse-2>",
      "evil-delete-backward-word": "C-w",
      "evil-delete-backward-char-and-join": "",
      "evil-paste-last-insertion-and-stop-insert": "C-@",
      "evil-paste-last-insertion": "C-a",
      "evil-shift-left-line": "C-d",
      "evil-shift-right-line": "C-t",
      "evil-complete-previous-line": "C-x C-p",
      "evil-complete-next-line": "C-x C-n",
      "evil-complete-previous": "C-p",
      "evil-complete-next": "C-n",
      "evil-copy-from-below": "C-e",
      "evil-copy-from-above": "C-y",
      "evil-paste-from-register": "C-r",
      "evil-execute-in-normal-state": "C-o",
      "evil-insert-digraph": "C-k",
      "evil-quoted-insert": "C-v",
      "evil-quoted-insert": "C-v",
      "evil-append": "<insert>"
    }
  },
  "evil-change-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change the state to STATE.\nIf STATE is nil, disable all states.",
    "arglist": [
      "state",
      "&optional",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-enclose-avy-for-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enclose avy to make it suitable for motions.\nBased on `evil-enclose-ace-jump-for-motion'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-next-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] next lowercase mark.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-compile-replacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Maybe convert a regexp replacement TO to Lisp.\nReturns a list suitable for `perform-replace' if necessary, the\noriginal string if not. Currently the following magic characters\nin replacements are supported: 0-9&#lLuUrnbt,\nThe magic character , (comma) start an Emacs-lisp expression.",
    "arglist": [
      "to"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-version": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The current version of Evil",
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-point": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The position of point in Visual state, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-get-max": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the maximal position of the highlight with name NAME.",
    "arglist": [
      "name"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inclusive-normalize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform normalize transformation on inclusive from BEG to END with PROPERTIES.\n\nInclude the character under point.\nIf the end position is at the beginning of a line or the end of a\nline and `evil-want-visual-char-semi-exclusive', then:\n\n* If in visual state return `exclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-intercept-keymap-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the state for the intercept keymap MAP.\nA return value of t means all states.",
    "arglist": [
      "map"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-push-search-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Push STRING into the appropriate search history (determined by FORWARD).",
    "arglist": [
      "string",
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-pop-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Same as `evil-paste-pop' but with negative argument.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-send-leader": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Put symbol leader in `unread-command-events' to trigger any\n<leader> bindings.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether Ex is currently active.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-screen-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "*Linewise selection in `visual-line-mode'.",
    "fn-docstring": "Linewise selection in `visual-line-mode'.",
    "arglist": [
      "&optional",
      "mark",
      "point",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-auxiliary-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Get the auxiliary keymap for MAP in STATE.\nIf CREATE is non-nil, create an auxiliary keymap\nif MAP does not have one. If CREATE and\nIGNORE-PARENT are non-nil then a new auxiliary\nkeymap is created even if the parent of MAP has\none already.",
    "arglist": [
      "map",
      "state",
      "&optional",
      "create",
      "ignore-parent"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-selection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the value of an X Windows selection.\nThe argument TYPE (default `PRIMARY') says which selection,\nand the argument DATA-TYPE (default `STRING') says\nhow to convert the data.\n\nTYPE may be any symbol (but nil stands for `PRIMARY').  However,\nonly a few symbols are commonly used.  They conventionally have\nall upper-case names.  The most often used ones, in addition to\n`PRIMARY', are `SECONDARY' and `CLIPBOARD'.\n\nDATA-TYPE is usually `STRING', but can also be one of the symbols\nin `selection-converter-alist', which see.  Window systems other\nthan X usually support only a small subset of these symbols, in\naddition to `STRING'; MS-Windows supports `TARGETS', which reports\nthe formats available in the clipboard if TYPE is `CLIPBOARD'.\n\n(fn &optional TYPE DATA-TYPE)",
    "arglist": [
      "&optional",
      "arg1",
      "arg2"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-restore": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore previous selection.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-remove-command-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Remove PROPERTIES from COMMAND.\nPROPERTIES should be a list of properties (:PROP1 :PROP2 ...).\nIf PROPERTIES is the empty list, all properties are removed.",
    "arglist": [
      "command",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-sort": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Place the smallest value in MIN and the largest in MAX.\nIf three or more arguments are given, place the smallest\nvalue in the first argument and the largest in the last,\nsorting in between.",
    "arglist": [
      "min",
      "max",
      "&rest",
      "vars"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-intercept-maps": {
    "default": "((edebug-mode-map))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Keymaps that should intercept Evil maps.\nEntries have the form (MAP-VAR . STATE), where MAP-VAR is\na keymap variable and STATE is the state whose bindings\nshould be intercepted. If STATE is nil, all states are\nintercepted.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-interactive-code": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define an interactive code.\nPROMPT, if given, is the remainder of the interactive string\nup to the next newline. Command properties may be specified\nvia KEY-VALUE pairs. BODY should evaluate to a list of values.\n\n(fn CODE (PROMPT) [[KEY VALUE]...] BODY...)",
    "arglist": [
      "code",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-search-activate-highlight": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Activate highlighting of the search pattern set to PATTERN.\nThis function does nothing if `evil-ex-search-interactive' or\n`evil-ex-search-highlight-all' is nil. ",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-range-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set RANGE's beginning to BEG.\nIf COPY is non-nil, return a copy of RANGE.",
    "arglist": [
      "range",
      "beg",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-pattern-whole-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return t if and only if PATTERN should match all occurences of a line.\nOtherwise PATTERN matches only the first occurence.",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-esc-delay": {
    "default": 0.01,
    "local": null,
    "default-type": "float",
    "var-docstring": "The time, in seconds, to wait for another key after escape.\nIf no further event arrives during this time, the event is\ntranslated to `ESC'.  Otherwise, it is translated according to\n`input-decode-map'.  This does not apply in Emacs state, and may\nalso be inhibited by setting `evil-inhibit-esc'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-digraph-char-with-overlay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read two chars, displaying the first in OVERLAY, replacing `?'.\nReturn the digraph from `evil-digraph', else return second char.",
    "arglist": [
      "overlay"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-match": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select next match.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-remove-yank-excluded-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Removes `yank-excluded-properties' from TEXT.",
    "arglist": [
      "text"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-keymap-for-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the keymap associated with MODE.\nReturn the keymap variable if VARIABLE is non-nil.\nSee also `evil-mode-for-keymap'.",
    "arglist": [
      "mode",
      "&optional",
      "variable"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-visual-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restores a character visual selection.\nIf the selection is in a single line, the restored visual\nselection covers the same number of characters. If the selection\ncovers several lines, the restored selection covers the same\nnumber of lines and the same number of characters in the last\nline as the original selection.",
    "arglist": [
      "nfwdlines",
      "nfwdchars"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--show-marks-select-action": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "entry"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-backward-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "History of backward searches.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-hproject-point-on-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Project point after BODY to current window.\nIf point is on a position left or right of the current window\nthen it is moved to the left and right boundary of the window,\nrespectively. If `auto-hscroll-mode' is non-nil then the left and\nright positions are increased or decreased, respectively, by\n`horizontal-margin' so that no automatic scrolling occurs.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-command-window-mode-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for `evil-command-window-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-command-window-execute": "<insert-state> RET",
      "evil-command-window-execute": "<insert-state> RET"
    }
  },
  "evil-forward-WORD-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th next WORD.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform expand transformation on line from BEG to END with PROPERTIES.\n\nInclude whole lines.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-highlight-all": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If t all matches for the substitute pattern are highlighted.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-registers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shows the contents of REGISTERS, or all registers, if none supplied.",
    "arglist": [
      "registers"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-without-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-scroll-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT half-screenwidths to the right.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-vnew": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the current window vertically\nand opens a new buffer name or edits a certain FILE.",
    "arglist": [
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-cross-buffers": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "When non-nil, the jump commands can cross borders between buffers, otherwise the jump commands act only within the current buffer.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-avy-goto-word-or-subword-1": "",
      "evil-avy-goto-word-1-below": "",
      "evil-avy-goto-word-1-above": "",
      "evil-avy-goto-word-1": "",
      "evil-avy-goto-word-0": "",
      "evil-avy-goto-symbol-1-below": "",
      "evil-avy-goto-symbol-1-above": "",
      "evil-avy-goto-symbol-1": "",
      "evil-avy-goto-subword-1": "",
      "evil-avy-goto-subword-0": "",
      "evil-avy-goto-line-below": "",
      "evil-avy-goto-line-above": "",
      "evil-avy-goto-line": "",
      "evil-avy-goto-char-timer": "",
      "evil-avy-goto-char-in-line": "",
      "evil-avy-goto-char-2-below": "",
      "evil-avy-goto-char-2-above": "",
      "evil-avy-goto-char-2": "",
      "evil-avy-goto-char": "",
      "evil-ace-jump-word-mode": "",
      "evil-ace-jump-line-mode": "",
      "evil-ace-jump-char-mode": "",
      "evil-shell-command": "!",
      "evil-ex": ":",
      "evil-mouse-drag-region": "<down-mouse-1>",
      "evil-scroll-down": "C-d",
      "evil-jump-forward": "TAB",
      "evil-emacs-state": "C-z",
      "evil-next-line": "j",
      "evil-previous-line": "k",
      "evil-forward-char": "SPC",
      "evil-backward-char": "h",
      "evil-buffer": "C-^",
      "evil-visual-block": "C-v",
      "evil-visual-line": "V",
      "evil-visual-char": "v",
      "evil-scroll-left": "z H",
      "evil-scroll-right": "z L",
      "evil-scroll-column-left": "z h",
      "evil-scroll-column-right": "z l",
      "evil-scroll-line-to-bottom": "z b",
      "evil-scroll-line-to-center": "z z",
      "evil-scroll-line-to-top": "z t",
      "evil-scroll-bottom-line-to-top": "z +",
      "evil-scroll-top-line-to-bottom": "z ^",
      "evil-execute-in-emacs-state": "\\",
      "evil-ret": "RET",
      "evil-scroll-line-up": "C-y",
      "evil-jump-backward": "C-o",
      "evil-scroll-page-down": "C-f",
      "evil-scroll-line-down": "C-e",
      "evil-scroll-page-up": "C-b",
      "evil-jump-to-tag": "C-]",
      "evil-switch-to-windows-last-buffer": "C-6",
      "evil-window-map": "C-w",
      "evil-previous-line-first-non-blank": "-",
      "evil-next-line-1-first-non-blank": "_",
      "evil-next-line-first-non-blank": "+",
      "evil-first-non-blank": "^",
      "evil-goto-column": "|",
      "evil-search-backward": "?",
      "evil-repeat-find-char": ";",
      "evil-search-forward": "/",
      "evil-repeat-find-char-reverse": ",",
      "evil-search-word-forward": "*",
      "evil-prev-flyspell-error": "[ s",
      "evil-previous-mark": "[ `",
      "evil-previous-mark-line": "[ '",
      "evil-previous-open-brace": "[ {",
      "evil-previous-open-paren": "[ (",
      "evil-backward-section-end": "[ ]",
      "evil-backward-section-begin": "[ [",
      "evil-next-flyspell-error": "] s",
      "evil-next-mark": "] `",
      "evil-next-mark-line": "] '",
      "evil-next-close-brace": "] }",
      "evil-next-close-paren": "] )",
      "evil-forward-section-end": "] [",
      "evil-forward-section-begin": "] ]",
      "evil-forward-sentence-begin": ")",
      "evil-backward-sentence-begin": "(",
      "evil-goto-mark-line": "'",
      "evil-goto-mark": "`",
      "evil-jump-item": "%",
      "evil-beginning-of-line": "0",
      "evil-end-of-line": "$",
      "evil-end-of-line": "$",
      "evil-search-word-backward": "#",
      "evil-forward-paragraph": "}",
      "evil-backward-paragraph": "{",
      "evil-previous-match": "g N",
      "evil-next-match": "g n",
      "evil-visual-restore": "g v",
      "evil-search-unbounded-word-forward": "g *",
      "evil-search-unbounded-word-backward": "g #",
      "evil-jump-to-tag": "C-]",
      "evil-end-of-visual-line": "g $",
      "evil-end-of-visual-line": "g $",
      "evil-goto-char": "g o",
      "evil-percentage-of-line": "g M",
      "evil-middle-of-visual-line": "g m",
      "evil-first-non-blank-of-visual-line": "g ^",
      "evil-first-non-blank-of-visual-line": "g ^",
      "evil-last-non-blank": "g _",
      "evil-beginning-of-visual-line": "g 0",
      "evil-previous-visual-line": "g k",
      "evil-previous-visual-line": "g k",
      "evil-next-visual-line": "g j",
      "evil-next-visual-line": "g j",
      "evil-goto-first-line": "g g",
      "evil-backward-WORD-end": "g E",
      "evil-backward-word-end": "g e",
      "evil-goto-definition": "g d",
      "evil-yank-line": "Y",
      "evil-yank": "y",
      "evil-forward-WORD-begin": "W",
      "evil-forward-word-begin": "w",
      "evil-find-char-to-backward": "T",
      "evil-find-char-to": "t",
      "evil-search-previous": "N",
      "evil-search-next": "n",
      "evil-window-middle": "M",
      "evil-window-bottom": "L",
      "evil-lookup": "K",
      "evil-forward-char": "SPC",
      "evil-forward-char": "SPC",
      "evil-previous-line": "k",
      "evil-next-line": "j",
      "evil-window-top": "H",
      "evil-backward-char": "h",
      "evil-goto-line": "G",
      "evil-find-char-backward": "F",
      "evil-find-char": "f",
      "evil-forward-WORD-end": "E",
      "evil-forward-word-end": "e",
      "evil-backward-WORD-begin": "B",
      "evil-backward-word-begin": "b",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "digit-argument": "9",
      "evil-beginning-of-line": "0"
    }
  },
  "evil-initialize-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set up the initial state for BUFFER.\nBUFFER defaults to the current buffer.\nUses STATE if specified, or calls `evil-initial-state-for-buffer'.\nSee also `evil-set-initial-state'.",
    "arglist": [
      "&optional",
      "state",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-chars": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of a sequence of CHARS.\nCHARS is a character set as inside [...] in a regular expression.",
    "arglist": [
      "chars",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--get-block-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the exclusive range of a visual selection.\nOP and CL are pairs of buffer positions for the opening and\nclosing delimiter of a range. SELECTION-TYPE is the desired type\nof selection.  It is a symbol that determines which parts of the\nblock are selected.  If it is 'inclusive or t the returned range\nis (cons (car OP) (cdr CL)). If it is 'exclusive or nil the\nreturned range is (cons (cdr OP) (car CL)).  If it is\n'exclusive-line the returned range will skip whitespace at the\nend of the line of OP and at the beginning of the line of CL.",
    "arglist": [
      "op",
      "cl",
      "selection-type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument-handler": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The argument handler for the current Ex command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-exit-emacs-state": "C-z"
    }
  },
  "evil-avy-goto-char-2-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char-2-above'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the value of property PROP for STATE.\nPROP is a keyword as used by `evil-define-state'.\nSTATE is the state's symbolic name.\nIf VALUE is non-nil and the value is a variable,\nreturn the value of that variable.",
    "arglist": [
      "state",
      "prop",
      "&optional",
      "value"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-pre-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Run before each COMMAND in Visual state.\nExpand the region to the selection unless COMMAND is a motion.",
    "arglist": [
      "&optional",
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The current Ex command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-max": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the largest position in POSITIONS.\nNon-numerical elements are ignored.\nSee also `evil-goto-min'.",
    "arglist": [
      "&rest",
      "positions"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-put-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set PROP to VAL for KEY in ALIST-VAR.\nALIST-VAR points to an association list with entries of the form\n(KEY . PLIST), where PLIST is a property list storing PROP and VAL.",
    "arglist": [
      "alist-var",
      "key",
      "prop",
      "val",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-marks": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shows all marks.\nIf MRKS is non-nil it should be a string and only registers\ncorresponding to the characters of this string are shown.",
    "arglist": [
      "mrks"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-keybinding": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to load evil-keybindings.el.\n\nThis loads a set of keybindings for evil in other modes as well as\nsetting the initial evil state in those modes.\n\nThis variable must be set before evil is loaded.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-line-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Jump visually to the beginning of a line using ace-jump.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-yanked-rectangle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Special function to delete the block yanked by a previous paste command.\nSupplied as the `undo' element of a yank handler.",
    "arglist": [
      "nrows",
      "ncols"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--flyspell-overlay-after": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "pos",
      "limit",
      "forwardp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-revert-reveal": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Unconditionally close overlays in OPEN-SPOTS in current window.\nModified version of `reveal-close-old-overlays' from\nreveal.el. OPEN-SPOTS is a local version of `reveal-open-spots'.",
    "arglist": [
      "open-spots"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-header-line-height": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the height of the header line.\nIf there is no header line, return 0.\nUsed as a fallback implementation of `window-header-line-height' on\nolder Emacsen.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-persistent-highlight": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil matches remain highlighted when the search ends.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-round": {
    "default": "t",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "\\<evil-normal-state-map>\nWhether shifting rounds to the nearest multiple.\nIf non-nil, \\[evil-shift-right] and \\[evil-shift-left] adjust line\nindentation to the nearest multiple of `evil-shift-width'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-apply-on-rectangle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Like `apply-on-rectangle' but maybe extends to eol.\nIf `temporary-goal-column' is set to a big number, then the\nregion of each line is extended to the end of each line. The end\ncolumn is set to the maximal column in all covered lines.",
    "arglist": [
      "function",
      "start",
      "end",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-min": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the smallest position in POSITIONS.\nNon-numerical elements are ignored.\nSee also `evil-goto-max'.",
    "arglist": [
      "&rest",
      "positions"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-bigword": {
    "default": "^ \t\r\n",
    "local": true,
    "default-type": "string",
    "var-docstring": "The set of characters to be interpreted as WORD boundaries.\nThis is enclosed with square brackets and used as a regular\nexpression.  By default, whitespace characters are considered\nWORD boundaries.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "History of `evil-mode' jumps that are persisted with `savehist'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-open-fold": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open fold at point.\nSee also `evil-close-fold'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-start-undo-step": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start a undo step.\nAll following buffer modifications are grouped together as a\nsingle action. If CONTINUE is non-nil, preceding modifications\nare included. The step is terminated with `evil-end-undo-step'.",
    "arglist": [
      "&optional",
      "continue"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-current-insertion": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Information about the latest insertion in insert state.\nThis should be a pair (BEG . END) that describes the\nbuffer-region of the newly inserted text.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner tag block.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restores a character visual selection.\nIf the selection is in a single line, the restored visual\nselection covers the same number of characters. If the selection\ncovers several lines, the restored selection covers the same\nnumber of lines and the same number of characters in the last\nline as the original selection.",
    "arglist": [
      "nfwdlines"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-regexp-magic": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse-word": {
    "default": "evil-word",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The thing-at-point symbol for double click selection.\nThe double-click starts visual state in a special word selection\nmode. This symbol is used to determine the words to be\nselected. Possible values are `evil-word' or `evil-WORD'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-eval": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "format",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-open-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Insert a new line above point and switch to Insert state.\nThe insertion will be repeated COUNT times.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-mark-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] line of previous lowercase mark before current line.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-put-command-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set PROPERTY to VALUE for COMMAND.\nTo set multiple properties at once, see\n`evil-set-command-properties' and `evil-add-command-properties'.",
    "arglist": [
      "command",
      "property",
      "value"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-esc": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Translate \\e to 'escape if no further event arrives.\nThis function is used to translate a \\e event either to 'escape\nor to the standard ESC prefix translation map. If \\e arrives,\nthis function waits for `evil-esc-delay' seconds for another\nevent. If no other event arrives, the event is translated to\n'escape, otherwise it is translated to the standard ESC prefix\nmap stored in `input-decode-map'. If `evil-inhibit-esc' is\nnon-nil or if evil is in emacs state, the event is always\ntranslated to the ESC prefix.\n\nThe translation to 'escape happens only if the current command\nhas indeed been triggered by \\e. In other words, this will only\nhappen when the keymap is accessed from `read-key-sequence'. In\nparticular, if it is access from `define-key' the returned\nmapping will always be the ESC prefix map.",
    "arglist": [
      "map"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-mode-syntax-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Syntax table for `evil-command-window-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-up-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of text enclosed by BEG and END.\nBEG and END should be regular expressions matching the opening\nand closing delimiters, respectively. If COUNT is greater than\nzero point is moved forward otherwise it is moved\nbackwards. Whenever an opening delimiter is found the COUNT is\nincreased by one, if a closing delimiter is found the COUNT is\ndecreased by one. The motion stops when COUNT reaches zero. The\nmatch-data reflects the last successful match (that caused COUNT\nto reach zero). The behaviour of this functions is similar to\n`up-list'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-register-list": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns an alist of all registers, but only those named\nwith number or character. Registers with symbol or string in names are ignored\nto keep Vim compatibility with register jumps.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-increase-width": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Increase current window width by COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-highlights-resize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update highlights after resizing a window.",
    "arglist": [
      "frame"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current mark, including whether it is transient.\nSee also `evil-restore-mark'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-u-delete": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-u' deletes back to indentation in insert state.\nOtherwise, `C-u' applies a prefix argument.  The binding of\n`C-u' mirrors Emacs behaviour by default due to the relative\nubiquity of prefix arguments.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT screen lines down.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-mode-abbrev-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Abbrev table for `evil-command-window-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-extract-append": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return an (APPEND . FILENAME) pair based on FILE-OR-APPEND.\nFILE-OR-APPEND should either be a filename or a \">> FILE\"\ndirective.  APPEND will be t if FILE-OR-APPEND is an append\ndirective and nil otherwise.  FILENAME will be the extracted\nfilename.",
    "arglist": [
      "file-or-append"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-exit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exit interactive search, keeping lazy highlighting active.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-minibuffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to enable Evil in minibuffer(s).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-undo-system": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Undo system Evil should use.  If equal to `undo-tree' or\n`undo-fu', those packages must be installed.  If equal to\n`undo-tree', `undo-tree-mode' must also be activated.  If equal\nto `undo-redo', Evil uses commands natively available in Emacs 28.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cached-header-line-height": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cached height of the header line.\nUsed for fallback implementation on older Emacsen.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-upcase": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Convert text to upper case.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-define-argument-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Defines a new handler for argument-type ARG-TYPE.\nDOC is the documentation string. It is followed by a list of\nkeywords and function:\n\n:collection COLLECTION\n\n  A collection for completion as required by `all-completions'.\n\n:completion-at-point FUNC\n\n  Function to be called to initialize a potential\n  completion. FUNC must match the requirements as described for\n  the variable `completion-at-point-functions'. When FUNC is\n  called the minibuffer content is narrowed to exactly match the\n  argument.\n\n:runner FUNC\n\n  Function to be called when the type of the current argument\n  changes or when the content of this argument changes. This\n  function should take one obligatory argument FLAG followed by\n  an optional argument ARG. FLAG is one of three symbol 'start,\n  'stop or 'update. When the argument type is recognized for the\n  first time and this handler is started the FLAG is 'start. If\n  the argument type changes to something else or ex state\n  finished the handler FLAG is 'stop. If the content of the\n  argument has changed FLAG is 'update. If FLAG is either 'start\n  or 'update then ARG is the current value of this argument. If\n  FLAG is 'stop then arg is nil.",
    "arglist": [
      "arg-type",
      "doc",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-change-commands": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Commands that wrap or replace `evil-change'.\nThis list exists to apply an inconsistency with vim's change command\nto commands that wrap or redefine it. See emacs-evil/evil#916.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Information accumulated during current repeat.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-all-buffers": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-insert-state-map>\nWhether completion looks for matches in all buffers.\nThis applies to \\[evil-complete-next] and \\[evil-complete-previous] in insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Visual state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-xml-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a range (BEG END) of COUNT matching XML tags.\nIf INCLUSIVE is non-nil, the tags themselves are included\nfrom the range.",
    "arglist": [
      "beg",
      "end",
      "type",
      "&optional",
      "count",
      "inclusive"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-symbol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-0-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to insert state at beginning of current line.\nPoint is placed at column 0, or the beginning of the visual line.\nThe insertion will be repeated COUNT times.  If VCOUNT is\nnon nil it should be number > 0. The insertion will be repeated\nin the next VCOUNT - 1 lines below the current one.",
    "arglist": [
      "count",
      "&optional",
      "vcount"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inhibit-esc": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil, the \\e event will never be translated to 'escape.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-sentence": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-g-bindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-g' postfix can be used in bindings.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a list (BEG END [TYPE] PROPERTIES...).\nBEG and END are buffer positions (numbers or markers),\nTYPE is a type as per `evil-type-p', and PROPERTIES is\na property list.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Motion state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-vim-regexp-replacements": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-char-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Characterwise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-rectangle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the rectangle defined by region BEG and END into the kill-ring.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-vector-to-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Turns vector into a string, changing <escape> to '\\e'",
    "arglist": [
      "vector"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-copy-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a copy of RANGE.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a range (BEG END) of COUNT delimited text objects.\nOPEN and CLOSE specify the opening and closing delimiter,\nrespectively. BEG END TYPE are the currently selected (visual)\nrange.  If INCLUSIVE is non-nil, OPEN and CLOSE are included in\nthe range; otherwise they are excluded.\n\nThe types of OPEN and CLOSE specify which kind of THING is used\nfor parsing with `evil-select-block'. If OPEN and CLOSE are\ncharacters `evil-up-paren' is used. Otherwise OPEN and CLOSE\nmust be regular expressions and `evil-up-block' is used.\n\nIf the selection is exclusive, whitespace at the end or at the\nbeginning of the selection until the end-of-line or beginning-of-line\nis ignored.",
    "arglist": [
      "open",
      "close",
      "beg",
      "end",
      "type",
      "count",
      "&optional",
      "inclusive"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-nearest": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Moves point forward to the first of several motions.\nFORWARDS is a list of forward motion functions (i.e. each moves\npoint forward to the next end of a text object (if passed a +1)\nor backward to the preceeding beginning of a text object (if\npassed a -1)). This function calls each of these functions once\nand moves point to the nearest of the resulting positions. If\nCOUNT is positive point is moved forward COUNT times, if negative\npoint is moved backward -COUNT times.",
    "arglist": [
      "count",
      "&rest",
      "forwards"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--execute-normal-return-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The state to return to after executing in normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-generate-mode-line-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Generate the evil mode-line tag for STATE.",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quoted-insert": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Like `quoted-insert' but delete COUNT chars forward in replace state.\nAdds a `^' overlay as an input prompt.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-auto-indent": {
    "default": "t",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "\\<evil-normal-state-map>\nWhether to auto-indent when opening lines with \\[evil-open-below] and \\[evil-open-above].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-update": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the highlighting and info-message for the search pattern.\nPATTERN is the search pattern and OFFSET the associated offset.\nBEG and END specifiy the current match, MESSAGE is the info\nmessage to be shown. This function does nothing if\n`evil-ex-search-interactive' is nil.",
    "arglist": [
      "pattern",
      "offset",
      "beg",
      "end",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-insert-commands": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Insert the commands in HIST.",
    "arglist": [
      "hist"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Emacs state.\n(That is, whether `evil-state' is `emacs'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-jump": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set jump point at POS.\nPOS defaults to point.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-overlay": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Overlay for highlighting the Visual selection.\nNot used for blockwise selections, in which case\nsee `evil-visual-block-overlays'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-char-timer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char-timer'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-ranges": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate RANGES.\nRANGES must be a list of ranges.  They must be ordered so that\nsuccessive ranges share their boundaries.  The return value is a\nsingle range of disjoint union of the ranges or nil if the\ndisjoint union is not a single range.",
    "arglist": [
      "ranges"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "mouse-yank-primary": "<mouse-2>",
      "evil-delete-backward-word": "C-w",
      "evil-delete-backward-char-and-join": "DEL",
      "evil-paste-last-insertion-and-stop-insert": "C-@",
      "evil-paste-last-insertion": "C-a",
      "evil-shift-left-line": "C-d",
      "evil-shift-right-line": "C-t",
      "evil-complete-previous-line": "C-x C-p",
      "evil-complete-next-line": "C-x C-n",
      "evil-complete-previous": "C-p",
      "evil-complete-next": "C-n",
      "evil-copy-from-below": "C-e",
      "evil-copy-from-above": "C-y",
      "evil-paste-from-register": "C-r",
      "evil-execute-in-normal-state": "C-o",
      "evil-insert-digraph": "C-k",
      "evil-quoted-insert": "C-v",
      "evil-quoted-insert": "C-v",
      "evil-replace-state": "<insert>",
      "evil-emacs-state": "C-z",
      "evil-normal-state": "<escape>",
      "delete-char": "<delete>"
    }
  },
  "evil--ex-remove-echo-overlay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Remove echo overlay from ex minibuffer.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-draw-prefix": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Display `evil-command-window-cmd-key' as a prefix to the current line.\nParameters passed in through IGNORED are ignored.",
    "arglist": [
      "&rest",
      "ignored"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "History of Ex commands.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-mode-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hook run after entering Evil List View mode.\nNo problems result if this variable is not bound.\n`add-hook' automatically binds it.  (This is true for all hook variables.)",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-end-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the current line.\nIf COUNT is given, move COUNT - 1 lines downward first.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-exit-visual-and-repeat": "<mouse-2>",
      "evil-find-file-at-point-visual": "g f",
      "evil-exit-visual-state": "<escape>",
      "evil-inner-symbol": "i o",
      "evil-inner-tag": "i t",
      "evil-inner-back-quote": "i `",
      "evil-inner-double-quote": "i \"",
      "evil-inner-single-quote": "i '",
      "evil-inner-angle": "i >",
      "evil-inner-angle": "i >",
      "evil-inner-curly": "i }",
      "evil-inner-curly": "i }",
      "evil-inner-curly": "i }",
      "evil-inner-bracket": "i ]",
      "evil-inner-bracket": "i ]",
      "evil-inner-paren": "i )",
      "evil-inner-paren": "i )",
      "evil-inner-paren": "i )",
      "evil-inner-paragraph": "i p",
      "evil-inner-sentence": "i s",
      "evil-inner-WORD": "i W",
      "evil-inner-word": "i w",
      "evil-a-symbol": "a o",
      "evil-a-tag": "a t",
      "evil-a-back-quote": "a `",
      "evil-a-double-quote": "a \"",
      "evil-a-single-quote": "a '",
      "evil-an-angle": "a >",
      "evil-an-angle": "a >",
      "evil-a-curly": "a }",
      "evil-a-curly": "a }",
      "evil-a-curly": "a }",
      "evil-a-bracket": "a ]",
      "evil-a-bracket": "a ]",
      "evil-a-paren": "a )",
      "evil-a-paren": "a )",
      "evil-a-paren": "a )",
      "evil-a-paragraph": "a p",
      "evil-a-sentence": "a s",
      "evil-a-WORD": "a W",
      "evil-a-word": "a w",
      "ispell-word": "z =",
      "evil-upcase": "U",
      "evil-downcase": "u",
      "evil-change-whole-line": "R",
      "evil-visual-exchange-corners": "O",
      "exchange-point-and-mark": "o",
      "evil-insert": "I",
      "evil-append": "A"
    }
  },
  "evil-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "*Linewise selection.",
    "fn-docstring": "Linewise selection.",
    "arglist": [
      "&optional",
      "mark",
      "point",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-in-single-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Set to non-nil if the current undo steps are connected.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-execute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute RESULT as an ex command on `evil-ex-current-buffer'.",
    "arglist": [
      "result"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to new COUNT-th window right of the current one.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap used in ex-search-mode.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "backward-kill-word": "C-w",
      "quoted-insert": "C-v",
      "evil-delete-whole-line": "C-u",
      "previous-history-element": "C-p",
      "next-history-element": "C-n",
      "evil-paste-from-register": "C-r",
      "evil-ex-search-command-window": "C-f",
      "evil-insert-digraph": "C-k",
      "abort-recursive-edit": "C-g",
      "abort-recursive-edit": "C-g",
      "move-beginning-of-line": "C-b",
      "evil-ex-delete-backward-char": "DEL",
      "abort-recursive-edit": "C-g",
      "exit-minibuffer": "RET",
      "exit-minibuffer": "RET",
      "abort-minibuffers": "",
      "file-cache-minibuffer-complete": "C-<tab>",
      "self-insert-command": "TAB",
      "previous-history-element": "C-p",
      "previous-line-or-history-element": "<up>",
      "previous-history-element": "C-p",
      "next-history-element": "C-n",
      "next-line-or-history-element": "<down>",
      "next-history-element": "C-n",
      "minibuffer-beginning-of-buffer": "M-<",
      "previous-matching-history-element": "M-r",
      "next-matching-history-element": "M-s",
      "previous-history-element": "C-p",
      "next-history-element": "C-n"
    }
  },
  "evil-define-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define a keymap KEYMAP listed in `evil-mode-map-alist'.\nThat means it will have precedence over regular keymaps.\n\nDOC is the documentation for the variable. BODY, if specified,\nis executed after toggling the mode. Optional keyword arguments\nmay be specified before the body code:\n\n:mode VAR       Mode variable. If unspecified, the variable\n                is based on the keymap name.\n:local BOOLEAN  Whether the keymap should be buffer-local, that is,\n                reinitialized for each buffer.\n:func BOOLEAN   Create a toggle function even if BODY is empty.\n\n(fn KEYMAP DOC [[KEY VAL]...] BODY...)",
    "arglist": [
      "keymap",
      "doc",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-delete-marks": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "MARKS is a string denoting all marks to be deleted. Mark names are\neither single characters or a range of characters in the form `x-y'.\nIf FORCE is non-nil and MARKS is blank, all local marks except 0-9 are removed.",
    "arglist": [
      "marks",
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-region-expanded": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Whether the region matches the Visual selection.\nThat is, whether the positions of point and mark have been\nexpanded to coincide with the selection's boundaries.\nThis makes the selection available to functions acting\non Emacs' region.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a keymap alist of keymaps activated by STATE.\nIf STATE references other states in its :enable property,\nthese states are recursively processed and added to the list.\n(The EXCLUDED argument is an internal safeguard against\ninfinite recursion, keeping track of processed states.)",
    "arglist": [
      "state",
      "&rest",
      "excluded"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-completion-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-line-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Linewise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-selection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Make an X selection of type TYPE and value DATA.\nThe argument TYPE (nil means `PRIMARY') says which selection, and\nDATA specifies the contents.  TYPE must be a symbol.  (It can also\nbe a string, which stands for the symbol with that name, but this\nis considered obsolete.)  DATA may be a string, a symbol, an\ninteger (or a cons of two integers or list of two integers).\n\nThe selection may also be a cons of two markers pointing to the same buffer,\nor an overlay.  In these cases, the selection is considered to be the text\nbetween the markers *at whatever time the selection is examined*.\nThus, editing done in the buffer after you specify the selection\ncan alter the effective value of the selection.\n\nThe data may also be a vector of valid non-vector selection values.\n\nThe return value is DATA.\n\nInteractively, this command sets the primary selection.  Without\nprefix argument, it reads the selection in the minibuffer.  With\nprefix argument, it uses the text of the region as the selection value.\n\nNote that on MS-Windows, primary and secondary selections set by Emacs\nare not available to other programs.\n\n(fn TYPE DATA)",
    "arglist": [
      "arg1",
      "arg2"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-buffer-new": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Creates a new buffer replacing the current window, optionally\n   editing a certain FILE",
    "arglist": [
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restores the column after execution of BODY.\nSee also `evil-save-goal-column'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-edit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open FILE.\nIf no FILE is specified, reload the current buffer from disk.",
    "arglist": [
      "file",
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-cmd-key": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The key for the command that opened the command line window (:, /, or ?).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-use-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Use REGISTER for the next command.",
    "arglist": [
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-eobp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether point is at end-of-buffer with regard to end-of-line.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-after": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Pastes the latest yanked text behind point.\nThe return value is the yanked text.",
    "arglist": [
      "count",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-search-module": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change the search module according to MODULE.\nIf MODULE is `isearch', then Emacs' isearch module is used.\nIf MODULE is `evil-search', then Evil's own interactive\nsearch module is used.",
    "arglist": [
      "option",
      "module"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-start-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The point where the search started.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-WORD-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th next WORD.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range-union": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the union of the ranges RANGE1 and RANGE2.\nIf the ranges have conflicting types, use RANGE1's type.\nThis can be overridden with TYPE.",
    "arglist": [
      "range1",
      "range2",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-fill-and-move": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Fill text and move point to the end of the filled region.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-lazy-highlight": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-block-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform expand transformation on block from BEG to END with PROPERTIES.\n\nLike `inclusive', but for rectangles:\nthe last column is included.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-operator": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define an operator command OPERATOR.\nThe operator acts on the range of characters BEG through\nEND. BODY must execute the operator by potentially manipulating\nthe buffer contents, or otherwise causing side effects to happen.\n\nOptional keyword arguments are:\n- `:type' - force the input range to be of a given type (`inclusive',\n  `line', `block', and `exclusive', or a self-defined motion type).\n- `:motion' - use a predetermined motion instead of waiting for one\n  from the keyboard.  This does not affect the behavior in visual\n  state, where selection boundaries are always used.\n- `:repeat' - if non-nil (default), then   \\<evil-normal-state-map>\\[evil-repeat] will repeat the\n  operator.\n- `:move-point' - if non-nil (default), the cursor will be moved to\n  the beginning of the range before the body executes\n- `:keep-visual' - if non-nil, the selection is not disabled when the\n  operator is executed in visual state.  By default, visual state is\n  exited automatically.\n\n(fn OPERATOR (BEG END ARGS...) DOC [[KEY VALUE]...] BODY...)",
    "arglist": [
      "operator",
      "args",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-repeat-substitute-with-flags": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat last substitute command with last flags.\nThis is the same as :s//~/&",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-join-whitespace": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Join the selected lines without changing whitespace.\n\\<evil-normal-state-map>Like \\[evil-join], but doesn't insert or remove any spaces.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-goto-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the last line of the Visual selection.\nThis position may differ from `evil-visual-end' depending on\nthe selection type, and is contained in the selection.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current state; execute BODY; restore the state.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-search-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the last search.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-up-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of balanced parentheses.\nOPEN and CLOSE should be characters identifying the opening and\nclosing parenthesis, respectively. If COUNT is greater than zero\npoint is moved forward otherwise it is moved backwards. Whenever\nan opening delimiter is found the COUNT is increased by one, if a\nclosing delimiter is found the COUNT is decreased by one. The\nmotion stops when COUNT reaches zero. The match-data reflects the\nlast successful match (that caused COUNT to reach zero).",
    "arglist": [
      "open",
      "close",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-digraphs-table-user": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "List of user-defined digraphs.\nEntries have the form ((?CHAR1 ?CHAR2) . ?DIGRAPH).  That is,\na cons cell of the digraph and its character replacement,\nwhere the digraph is a list of two characters.\nSee also `evil-digraphs-table'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Insert state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-mark-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] line of next lowercase mark after current line.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-force-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Overwrite the current states default cursor.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-screen-line-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Linewise selection in `visual-line-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-mark-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the line of the marker specified by CHAR.",
    "arglist": [
      "char",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the horizontal position of POS.\nPOS defaults to point.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-clean-isearch-overlays": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Clean isearch overlays unless `this-command' is search.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-empty-ex-last-command": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to default to evil-ex-previous-command at empty ex prompt.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-common": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-line-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-line-below'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the end of the COUNT next object.\nIf COUNT is negative, move to the COUNT previous object.\nFORWARD is a function which moves to the end of the object, and\nBACKWARD is a function which moves to the beginning.\nIf one is unspecified, the other is used with a negative argument.\nIf INCLUSIVE is non-nil, then point is placed at the last character\nof the object; otherwise it is placed at the end of the object.",
    "arglist": [
      "count",
      "forward",
      "&optional",
      "backward",
      "inclusive"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-open-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Insert a new line below point and switch to Insert state.\nThe insertion will be repeated COUNT times.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-start-track-last-insertion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start tracking the last insertion.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-integration": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-WORD-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th previous WORD.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Motion state.\n(That is, whether `evil-state' is `motion'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paragraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-type-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether SYM is the name of a type.",
    "arglist": [
      "sym"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-block-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Blockwise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-off-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Replace state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-line-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-line-above'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-highlight-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Highlight rectangular region from BEG to END.\nDo this by putting an overlay on each line within the rectangle.\nEach overlay extends across all the columns of the rectangle.\nReuse overlays where possible to prevent flicker.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "overlays"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-command-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set PROPERTY to VALUE for COMMAND.\nTo set multiple properties at once, see\n`evil-set-command-properties' and `evil-add-command-properties'.",
    "arglist": [
      "command",
      "property",
      "value"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-copy-from-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Copy characters from following non-blank line.\nThe copied text is inserted before point.\nARG is the number of lines to move forward.\nSee also \\<evil-insert-state-map>\\[evil-copy-from-above].",
    "arglist": [
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ac-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-avy-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "command",
      "type"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil--jump-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-an-angle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select an angle bracket.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-show-digraphs": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shows a list of all available digraphs.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-paragraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a paragraph.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-line-1-first-non-blank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT-1 lines down on the first non-blank character.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-magic": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns a regexp matching the magic characters according to MAGIC.\nDepending on the value of MAGIC the following characters are\nconsidered magic.\n  t             [][{}*+?.&~$^\n  nil           [][{}*+?$^\n  'very-magic   not 0-9A-Za-z_\n  'very-nomagic empty.",
    "arglist": [
      "magic"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-shell-command-completion-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transform-regexp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "regexp",
      "replacements-alist"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last search pattern.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Motion state is enabled.\nUse the command `evil-motion-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-side-windows": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Toggle side windows, evaluate BODY, restore side windows.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-last-find": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "A pair (FUNCTION . CHAR) describing the lastest character\n  search command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-pre-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Remember the character under point.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command-collection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Called to complete a command.",
    "arglist": [
      "cmd",
      "predicate",
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-buffers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to new COUNT-th window left of the current one.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "mouse-yank-primary": "<mouse-2>",
      "evil-redo": "C-r",
      "evil-undo": "u",
      "evil-paste-pop": "C-p",
      "evil-paste-pop": "C-p",
      "evil-force-normal-state": "<escape>",
      "evil-backward-char": "DEL",
      "evil-quit": "Z Q",
      "evil-save-modified-and-close": "Z Z",
      "evil-shift-right": ">",
      "evil-shift-left": "<",
      "evil-indent": "=",
      "evil-invert-char": "~",
      "evil-use-register": "\"",
      "evil-execute-macro": "@",
      "evil-repeat": ".",
      "evil-repeat-pop-next": "M-.",
      "evil-repeat-pop": "C-.",
      "pop-tag-mark": "C-t",
      "evil-paste-pop": "C-p",
      "evil-paste-pop-next": "C-n",
      "ispell-word": "z =",
      "evil-close-folds": "z m",
      "evil-open-folds": "z r",
      "evil-toggle-fold": "z a",
      "evil-close-fold": "z c",
      "evil-open-fold-rec": "z O",
      "evil-open-fold": "z o",
      "evil-find-file-at-point-with-line": "[ F",
      "find-file-at-point": "[ f",
      "evil-find-file-at-point-with-line": "[ F",
      "find-file-at-point": "[ f",
      "goto-last-change-reverse": "g ,",
      "goto-last-change": "g ;",
      "tab-bar-switch-to-prev-tab": "g T",
      "tab-bar-switch-to-next-tab": "g t",
      "evil-invert-case": "g ~",
      "evil-rot13": "g ?",
      "browse-url-at-point": "g x",
      "evil-find-file-at-point-with-line": "[ F",
      "find-file-at-point": "[ f",
      "evil-upcase": "g U",
      "evil-downcase": "g u",
      "evil-fill": "g w",
      "evil-fill-and-move": "g q",
      "evil-join-whitespace": "g J",
      "evil-insert-0-line": "g I",
      "evil-insert-resume": "g i",
      "what-cursor-position": "g a",
      "what-cursor-position": "g a",
      "evil-ex-repeat-global-substitute": "g &",
      "evil-ex-repeat-substitute": "&",
      "evil-yank-line": "Y",
      "evil-yank": "y",
      "evil-delete-char": "x",
      "evil-delete-backward-char": "X",
      "evil-delete-char": "x",
      "evil-change-whole-line": "S",
      "evil-substitute": "s",
      "evil-replace-state": "R",
      "evil-replace": "r",
      "evil-record-macro": "q",
      "evil-paste-before": "P",
      "evil-paste-after": "p",
      "evil-open-above": "O",
      "evil-open-below": "o",
      "evil-set-marker": "m",
      "evil-join": "J",
      "evil-insert-line": "I",
      "evil-insert": "i",
      "evil-insert": "i",
      "evil-insert": "i",
      "evil-delete-line": "D",
      "evil-delete": "d",
      "evil-change-line": "C",
      "evil-change": "c",
      "evil-append-line": "A",
      "evil-append": "a"
    }
  },
  "evil-complete-next-line-func": {
    "default": "(closure (dabbrev-case-distinction dabbrev-search-these-buffers-only t) (arg) (let ((hippie-expand-try-functions-list '(try-expand-line try-expand-line-all-buffers))) (hippie-expand arg)))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Minibuffer completion function used by \\<evil-insert-state-map>\\[evil-complete-next-line].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-post-jump-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run just after jumping to a location in the jump list.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether SYM is the name of a state.",
    "arglist": [
      "sym"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-screen-line-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform expand transformation on screen-line from BEG to END with PROPERTIES.\n\nInclude whole lines, being aware of `visual-line-mode'\nwhen `evil-respect-visual-line-mode' is non-nil.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-teardown": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Deinitialize Ex minibuffer.\nClean up everything set up by `evil-ex-setup'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-completion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Completes the current ex command or argument.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-select": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a Visual selection of type TYPE from BEG to END.\nPoint and mark are positioned so that the resulting selection\nhas the specified boundaries. If DIR is negative, point precedes mark,\notherwise it succedes it. To specify point and mark directly,\nuse `evil-visual-make-selection'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "dir",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-looking-at-start-comment": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns t if point is at the start of a comment.\npoint must be on one of the opening characters of a block comment\naccording to the current syntax table. Futhermore these\ncharacters must been parsed as opening characters, i.e. they\nwon't be considered as comment starters inside a string or\npossibly another comment. Point is moved to the first character\nof the comment opener if MOVE is non-nil.",
    "arglist": [
      "&optional",
      "move"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-pattern-update-ex-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the Ex info string.",
    "arglist": [
      "_hl",
      "result"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-recording-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether we are recording a repeat.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shift text from BEG to END to the right.\nThe text is shifted to the nearest multiple of `evil-shift-width'\n(the rounding can be disabled by setting `evil-shift-round').\nIf PRESERVE-EMPTY is non-nil, lines that contain only spaces are\nindented, too, otherwise they are ignored.  Location of point\nis preserved relative to text when called from insert or replace states.\nOtherwise, it is determined by `evil-start-of-line' and/or `evil-track-eol'.\nSee also `evil-shift-left'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "count",
      "preserve-empty"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--show-jumps-select-action": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "jump"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-open-folds": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open all folds.\nSee also `evil-close-folds'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-shell-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last shell command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-downcase-first": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return STR with the first letter downcased.",
    "arglist": [
      "str"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-next-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Complete a whole line.\nCalls `evil-complete-next-line-func'.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-block-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Blockwise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of Visual selection functions.\nElements have the form (NAME . FUNCTION).",
    "fn-docstring": "Return an association list from types to selection symbols.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-subword-0": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-subword-0'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-subword-1": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-subword-1'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motions": {
    "default": "(back-to-indentation backward-char backward-list backward-paragraph backward-sentence backward-sexp backward-up-list backward-word beginning-of-buffer beginning-of-defun beginning-of-line beginning-of-visual-line c-beginning-of-defun c-end-of-defun diff-file-next diff-file-prev diff-hunk-next diff-hunk-prev down-list end-of-buffer end-of-defun end-of-line end-of-visual-line exchange-point-and-mark forward-char forward-list forward-paragraph forward-sentence forward-sexp forward-word goto-last-change ibuffer-backward-line ibuffer-forward-line isearch-abort isearch-cancel isearch-complete isearch-del-char isearch-delete-char isearch-edit-string isearch-exit isearch-highlight-regexp isearch-occur isearch-other-control-char isearch-other-meta-char isearch-printing-char isearch-query-replace isearch-query-replace-regexp isearch-quote-char isearch-repeat-backward isearch-repeat-forward isearch-ring-advance isearch-ring-retreat isearch-toggle-case-fold isearch-toggle-input-method isearch-toggle-regexp isearch-toggle-specified-input-method isearch-toggle-word isearch-yank-char isearch-yank-kill isearch-yank-line isearch-yank-word-or-char keyboard-quit left-char left-word mouse-drag-region mouse-save-then-kill mouse-set-point mouse-set-region mwheel-scroll move-beginning-of-line move-end-of-line next-error next-line paredit-backward paredit-backward-down paredit-backward-up paredit-forward paredit-forward-down paredit-forward-up pop-global-mark pop-tag-mark pop-to-mark-command previous-error previous-line right-char right-word scroll-down scroll-down-command scroll-up scroll-up-command sgml-skip-tag-backward sgml-skip-tag-forward up-list)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Non-Evil commands to initialize to motions.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--lowercase-markers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Get all lowercase markers.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-make-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create an active region from MARK to POINT.\nIf TYPE is given, also set the Visual type.\nIf MESSAGE is given, display it in the echo area.",
    "arglist": [
      "mark",
      "point",
      "&optional",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Replace state.\n(That is, whether `evil-state' is `replace'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switches to another buffer.",
    "arglist": [
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-clear-command-keys": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Clear `this-command-keys' and all information about the current command keys.\nCalling this function prevents further recording of the keys that\ninvoked the current command",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-down": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to new COUNT-th window below the current one.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-text-object-change-visual-type": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Text objects change the current visual state type.\nIf non-nil then a text-object changes the type of the visual state to\nits default selection type (e.g. a word object always changes to\ncharwise visual state). Otherwise the current visual state type is\npreserved.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-called-interactively-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Wrapper for `called-interactively-p'.\nIn older versions of Emacs, `called-interactively-p' takes\nno arguments.  In Emacs 23.2 and newer, it takes one argument.",
    "arglist": null,
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-percentage-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to COUNT % of the width of the current line.\nIf no COUNT is given, default to 50%.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-stop-track-last-insertion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Stop tracking the last insertion.\nThe tracked insertion is set to `evil-last-insertion'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-sentence": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a sentence.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner word.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-state": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The Evil state being switched from.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Replace state is enabled.\nUse the command `evil-replace-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-previous": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Complete to the nearest preceding word.\nSearch forward if a match isn't found.\nCalls `evil-complete-previous-func'.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move forward to end of THING.\nThe motion is repeated COUNT times.",
    "arglist": [
      "thing",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-exchange-corners": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Rearrange corners in Visual Block mode.\n\n        M---+           +---M\n        |   |    <=>    |   |\n        +---P           P---+\n\nFor example, if mark is in the upper left corner and point\nin the lower right, this function puts mark in the upper right\ncorner and point in the lower left.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-line-first-non-blank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines up on the first non-blank character.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Normal state.\n(That is, whether `evil-state' is `normal'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-split-window-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If non-nil split windows are created below.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-types": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument-completion-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-up": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to new COUNT-th window above the current one.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-global-marker-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether CHAR denotes a global marker.",
    "arglist": [
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-operator": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Current operator.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move forward to beginning of THING.\nThe motion is repeated COUNT times.",
    "arglist": [
      "thing",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-range-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Motion of `evil-operator-range'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last executed register.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-word-1-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-word-1-below'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-set-max": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the minimal buffer position of the highlight HL to MAX.",
    "arglist": [
      "hl",
      "max"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Visual state is enabled.\nUse the command `evil-visual-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--redo-placeholder": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "_count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-bracket": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner square bracket.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-rotate-downwards": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Rotates the windows according to the current cyclic ordering.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-set-height": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Sets the height of the current window to COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-in-emacs-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute the next command in Emacs state.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return size of line from BEG to END with PROPERTIES.\n\nInclude whole lines.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-auxiliary-keymap-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether MAP is an auxiliary keymap.",
    "arglist": [
      "map"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-set-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set minimal and maximal position of highlight NAME to BEG and END.",
    "arglist": [
      "name",
      "beg",
      "end",
      "&optional",
      "_type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-echo-area-save": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current echo area in `evil-echo-area-message'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-finish-record-changes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Finishes the recording of buffer changes and records them as repeat.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-find-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the next occurrence of the PATTERN in DIRECTION.\nPATTERN must be created using `evil-ex-make-pattern', DIRECTION\nis either 'forward or 'backward. If NOWRAP is non nil, the search\ndoes not wrap at buffer boundaries. Furthermore this function\nonly searches invisible text if `search-invisible' is t. If\nPATTERN is not specified the current global pattern\n`evil-ex-search-pattern' and if DIRECTION is not specified the\ncurrent global direction `evil-ex-search-direction' is used.\nThis function returns t if the search was successful, nil if it\nwas unsuccessful and 'wrapped if the search was successful but\nhas been wrapped at the buffer boundaries.",
    "arglist": [
      "&optional",
      "pattern",
      "direction",
      "nowrap"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-delay": {
    "default": 0.02,
    "local": null,
    "default-type": "float",
    "var-docstring": "Time in seconds of idle before updating search highlighting.\nSetting this to a period shorter than that of keyboard's repeat\nrate allows highlights to update while scrolling.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-previous-pos": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Access slot \"previous-pos\" of `evil-jumps-struct' struct CL-X.",
    "arglist": [
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-pattern-ignore-case": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return t if and only if PATTERN should ignore case.",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-add-to-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add the assocation of KEY and VAL to the value of LIST-VAR.\nIf the list already contains an entry for KEY, update that entry;\notherwise add at the end of the list.",
    "arglist": [
      "list-var",
      "key",
      "val",
      "&rest",
      "elements"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-visual-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restores a character visual selection.\nIf the selection is in a single line, the restored visual\nselection covers the same number of characters. If the selection\ncovers several lines, the restored selection covers the same\nnumber of lines and the same number of characters in the last\nline as the original selection.",
    "arglist": [
      "nfwdlines",
      "nfwdchars"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The current range of the Ex command.",
    "fn-docstring": "Returns the first and last position of the current range.",
    "arglist": [
      "beg-line",
      "&optional",
      "end-line"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-bottom-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to bottom-right window.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-file-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shows basic file information.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-char-to-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move before the previous COUNT'th occurrence of CHAR.",
    "arglist": [
      "&optional",
      "count",
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-cmhh": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-jumping-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Set by `evil--jump-backward', used and cleared in the\n`post-command-hook' by `evil--jump-handle-buffer-crossing'",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-alists": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate association lists, removing duplicates.\nAn alist is a list of cons cells (KEY . VALUE) where each key\nmay occur only once. Later values overwrite earlier values.",
    "arglist": [
      "&rest",
      "sequences"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-append": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to Insert state just after point.\nThe insertion will be repeated COUNT times and repeated once for\nthe next VCOUNT - 1 lines starting at the same column.  If\nSKIP-EMPTY-LINES is non-nil, the insertion will not be performed\non lines on which the insertion point would be after the end of\nthe lines.",
    "arglist": [
      "count",
      "&optional",
      "vcount",
      "skip-empty-lines"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Visual state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-completed-binding": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns the final binding of the completion of COMMAND.",
    "arglist": [
      "command",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-get-window-jump-list": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-syntactic-context": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the syntactical context of the character at POS.\nPOS defaults to the current position of point.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initial-state-for-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the initial Evil state to use for BUFFER.\nBUFFER defaults to the current buffer. Returns DEFAULT\nif no initial state is associated with BUFFER.\nSee also `evil-initial-state'.",
    "arglist": [
      "&optional",
      "buffer",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-timer": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Time used for updating highlights.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-sentence": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner sentence.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Emacs state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode-set-explicitly": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-curly": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a curly bracket (\"brace\").",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-repeat-global-substitute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat last substitute command on the whole buffer.\nThis is the same as :%s//~/&",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jump-to-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Jump to tag under point.\nIf called with a prefix argument, provide a prompt\nfor specifying the tag.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-repeat-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Executes a repeat-information REPEAT-INFO.",
    "arglist": [
      "repeat-info"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-auxiliary-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a keymap alist of auxiliary keymaps for STATE.",
    "arglist": [
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-signal-at-bob": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Signals 'beginning-of-buffer if `point' is at bob.\nThis function should be used in backward motions. If `point' is at\nbob so that no further backward motion is possible the error\n'beginning-of-buffer is raised.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-plists": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate property lists, removing duplicates.\nA property list is a list (:KEYWORD1 VALUE1 :KEYWORD2 VALUE2...)\nwhere each keyword may occur only once. Later values overwrite\nearlier values.",
    "arglist": [
      "&rest",
      "sequences"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-states": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a parenthesis.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-section-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th next section.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-force-abort-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns non-nil iff the current command should abort the recording of repeat information.",
    "arglist": [
      "repeat-type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-line-first-non-blank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines down on the first non-blank character.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-reset": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Clear all repeat recording variables.\nSet `evil-recording-repeat' to FLAG.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-record-macro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Record a keyboard macro into REGISTER.\nIf REGISTER is :, /, or ?, the corresponding command line window\nwill be opened instead.",
    "arglist": [
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse-start-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a list of region bounds based on START and END according to MODE.\nIf MODE is not 1 then set point to (min START END), mark to (max\nSTART END).  If MODE is 1 then set point to start of word at (min\nSTART END), mark to end of word at (max START END).",
    "arglist": [
      "start",
      "end",
      "mode"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-disable-insert-state-bindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether insert state bindings should be used.\nBindings for escape, delete and `evil-toggle-key' are always\navailable. If this is non-nil, default Emacs bindings are by and\nlarge accessible in insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-parser--dexp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse a numerical dollar-sign symbol.\nGiven e.g. $4, return 4.",
    "arglist": [
      "obj"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-align-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Right-align lines in the region at WIDTH columns.\nThe default for width is the value of `fill-column'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "width"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-resize-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the current window's width or height to NEW-SIZE.\nIf HORIZONTAL is non-nil the width of the window is changed,\notherwise its height is changed.",
    "arglist": [
      "new-size",
      "&optional",
      "horizontal"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--stick-to-eol-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Called by vertical movement commands to help determine cursor position.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-do-update-highlight": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Timer function for updating the highlights.",
    "arglist": [
      "&optional",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the :repeat property of COMMAND.\nIf COMMAND doesn't have this property, return DEFAULT.",
    "arglist": [
      "command",
      "&optional",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-write": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current buffer, from BEG to END, to FILE-OR-APPEND.\nIf FILE-OR-APPEND is of the form \">> FILE\", append to FILE\ninstead of overwriting.  The current buffer's filename is not\nchanged unless it has no associated file and no region is\nspecified.  If the file already exists and the BANG argument is\nnon-nil, it is overwritten without confirmation.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "file-or-append",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-global-keymaps-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of keymap variables.\nEntries have the form (MODE . KEYMAP), where KEYMAP\nis the variable containing the keymap for MODE.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Motion state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-characters": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the characters defined by the region BEG and END in the kill-ring.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-deactivate-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Deactivate the region and restore Transient Mark mode.",
    "arglist": [
      "&optional",
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-screen-line-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Linewise selection in `visual-line-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-mark": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The position of mark in Visual state, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-minor-mode-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Get the auxiliary keymap for MODE in STATE, creating one if it\ndoes not already exist.",
    "arglist": [
      "state",
      "mode"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-undo-function": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Function to be used by `evil-undo'.\nCustomized via `evil-undo-system'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-marker": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the marker denoted by CHAR.\nThis is either a marker object as returned by `make-marker',\na number, a cons cell (FILE . POS) with FILE being a string\nand POS a number, or nil. If RAW is non-nil, then the\nreturn value may also be a variable, a movement function,\nor a marker object pointing nowhere.",
    "arglist": [
      "char",
      "&optional",
      "raw"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-marker": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the marker denoted by CHAR to position POS.\nPOS defaults to the current position of point.\nIf ADVANCE is t, the marker advances when inserting text at it;\notherwise, it stays behind.",
    "arglist": [
      "char",
      "&optional",
      "pos",
      "advance"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-window-jumps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hashtable which stores all jumps on a per window basis.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Operator-Pending state is enabled.\nUse the command `evil-operator-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The count argument of the current paste command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-grammar": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Grammar for Ex.\nAn association list of syntactic symbols and their definitions.\nThe first entry is the start symbol.  A symbol's definition may\nreference other symbols, but the grammar cannot contain\nleft recursion.  See `evil-parser' for a detailed explanation\nof the syntax.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-core": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-toggle-fold": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open or close a fold under point.\nSee also `evil-open-fold' and `evil-close-fold'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-backward-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete previous character.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-repeat-substitute-with-search-and-flags": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat last substitute command with last search pattern and last flags.\nThis is the same as :s//~/&r",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define a command COMMAND.\n\n(fn COMMAND (ARGS...) DOC [[KEY VALUE]...] BODY...)",
    "arglist": [
      "command",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-backspace-join-lines": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether backward delete in insert state may join lines.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-goto-offset": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point according to search OFFSET and set `evil-this-type' accordingly.\nThis function assumes that the current match data represents the\ncurrent search result.",
    "arglist": [
      "offset"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-start-col": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Used to restore column (where possible) after an operator has moved it.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-execute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute the command under the cursor in the appropriate buffer.\nThe local var `evil-command-window-execute-fn' determines which\nfunction to execute.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-modes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Modes that should come up in Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-type-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return property PROP for TYPE.",
    "arglist": [
      "type",
      "prop"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-highlights-scroll": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update highlights after scrolling in some window.",
    "arglist": [
      "win",
      "_beg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-replace-special-filenames": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace special symbols in FILE-NAME.\nReplaces % by the current file-name,\nReplaces # by the alternate file-name in FILE-NAME.",
    "arglist": [
      "file-name"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-match-interactive-code": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Match an interactive code at position POS in string INTERACTIVE.\nReturns the first matching entry in `evil-interactive-alist', or nil.",
    "arglist": [
      "interactive",
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-double-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner double-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-jumping": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-matches": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-types": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "An alist of defined repeat-types.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-intercept-keymap-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether MAP is an intercept keymap for STATE.\nIf STATE is nil, it means any state.",
    "arglist": [
      "map",
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normalize-repeat-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate consecutive arrays in REPEAT-INFO.\nReturns a single array.",
    "arglist": [
      "repeat-info"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-disabled-buffer-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether Evil should be disabled in BUFFER.",
    "arglist": [
      "&optional",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-comment": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-text-object": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define a text object command OBJECT.\nBODY should return a range (BEG END) to the right of point\nif COUNT is positive, and to the left of it if negative.\n\nOptional keyword arguments:\n- `:type' - determines how the range applies after an operator\n  (`inclusive', `line', `block', and `exclusive', or a self-defined\n  motion type).\n- `:extend-selection' - if non-nil (default), the text object always\n  enlarges the current selection.  Otherwise, it replaces the current\n  selection.\n\n(fn OBJECT (COUNT) DOC [[KEY VALUE]...] BODY...)",
    "arglist": [
      "object",
      "args",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-substitute-interactive-replace": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If t and substitute patterns are highlighted,\nthe replacement is shown interactively.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-cursor-back": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether the cursor is moved backwards when exiting insert state.\nIf non-nil, the cursor moves \"backwards\" when exiting insert state,\nso that it ends up on the character to the left.  Otherwise it remains\nin place, on the character to the right.",
    "fn-docstring": "Move point one character back within the current line.\nContingent on the variable `evil-move-cursor-back' or the FORCE\nargument. Honors field boundaries, i.e., constrains the movement\nto the current field as recognized by `line-beginning-position'.",
    "arglist": [
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-fold-action": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform fold ACTION for each matching major or minor mode in LIST.\n\nACTION will be performed for the first matching handler in LIST.  For more\ninformation on its features and format, see the documentation for\n`evil-fold-list'.\n\nIf no matching ACTION is found in LIST, an error will signaled.\n\nHandler errors will be demoted, so a problem in one handler will (hopefully)\nnot interfere with another.",
    "arglist": [
      "list",
      "action"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete to end of line.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-post-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Finish recording of repeat-information for the current-command.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-rectangle-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform expand transformation on rectangle from BEG to END with PROPERTIES.\n\nLike `exclusive', but for rectangles:\nthe last column is excluded.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-paste": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Information about the latest paste.\nThis should be a list (CMD COUNT POINT BEG END FIRSTVISUAL) where\nCMD is the last paste-command (`evil-paste-before',\n`evil-paste-after' or `evil-visual-paste'), COUNT is the repeat\ncount of the paste, POINT is the position of point before the\npaste, BEG end END are the region of the inserted\ntext. FIRSTVISUAL is t if and only if the previous command was\nthe first visual paste (i.e. before any paste-pop).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Deletes a buffer.\nAll windows currently showing this buffer will be closed except\nfor the last window in each frame.",
    "arglist": [
      "buffer",
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-find-temp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT screen lines up.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-flash-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Disable hightlighting if `this-command' is not search.\nDisable anyway if FORCE is t.",
    "arglist": [
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the window of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-parse": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as an Ex expression and return an evaluation tree.\nIf SYNTAX is non-nil, return a syntax tree instead.\nSTART is the start symbol, which defaults to `expression'.",
    "arglist": [
      "string",
      "&optional",
      "syntax",
      "start"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-make-substitute-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Creates a PATTERN for substitution with FLAGS.\nThis function respects the values of `evil-ex-substitute-case'\nand `evil-ex-substitute-global'.",
    "arglist": [
      "regexp",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner parenthesis.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-outer-text-objects-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for outer text objects.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-a-symbol": "o",
      "evil-a-tag": "t",
      "evil-a-back-quote": "`",
      "evil-a-double-quote": "\"",
      "evil-a-single-quote": "'",
      "evil-an-angle": ">",
      "evil-an-angle": ">",
      "evil-a-curly": "}",
      "evil-a-curly": "}",
      "evil-a-curly": "}",
      "evil-a-bracket": "]",
      "evil-a-bracket": "]",
      "evil-a-paren": ")",
      "evil-a-paren": ")",
      "evil-a-paren": ")",
      "evil-a-paragraph": "p",
      "evil-a-sentence": "s",
      "evil-a-WORD": "W",
      "evil-a-word": "w"
    }
  },
  "evil-ex-repeat-substitute-with-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat last substitute command with last search pattern.\nThis is the same as :s//~/r",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-rotate-upwards": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Rotates the windows according to the current cyclic ordering.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search backward for user-entered text.\nSearches for regular expression if `evil-regexp-search' is t.\n\nBelow is the documentation string for `isearch-forward',\nwhich lists available keys:\n\nDo incremental search forward.\nWith a prefix argument, do an incremental regular expression search instead.\n\nAs you type characters, they add to the search string and are found.\nThe following non-printing keys are bound in ‘isearch-mode-map’.\n\nType DEL to cancel last input item from end of search string.\nType RET to exit, leaving point at location found.\nType LFD (C-j) to match end of line.\nType C-s to search again forward, C-r to search again backward.\nType M-s M-< to go to the first match, M-s M-> to go to the last match.\nType C-w to yank next word or character in buffer\n  onto the end of the search string, and search for it.\nType C-M-d to delete character from end of search string.\nType C-M-y to yank char from buffer onto end of search string and search for it.\nType C-M-z to yank from point until the next instance of a\n specified character onto end of search string and search for it.\nType M-s C-e to yank rest of line onto end of search string and search for it.\nType C-y to yank the last string of killed text.\nType M-y to replace string just yanked into search prompt\n with string killed before it.\nType C-q to quote control character to search for it.\nType C-x 8 RET to add a character to search by Unicode name, with completion.\nC-g while searching or when search has failed cancels input back to what has\n been found successfully.\nC-g when search is successful aborts and moves point to starting point.\n\nIf you try to exit with the search string still empty, it invokes\n nonincremental search.\n\nType M-s c to toggle search case-sensitivity.\nType M-s i to toggle search in invisible text.\nType M-s r to toggle regular-expression mode.\nType M-s w to toggle word mode.\nType M-s _ to toggle symbol mode.\nType M-s ' to toggle character folding.\n\nType M-s SPC to toggle whitespace matching.\nIn incremental searches, a space or spaces normally matches any whitespace\ndefined by the variable ‘search-whitespace-regexp’; see also the variables\n‘isearch-lax-whitespace’ and ‘isearch-regexp-lax-whitespace’.\n\nType M-s e to edit the search string in the minibuffer.\n\nAlso supported is a search ring of the previous 16 search strings.\nType M-n to search for the next item in the search ring.\nType M-p to search for the previous item in the search ring.\nType C-M-i to complete the search string using the search ring.\n\nType M-% to run ‘query-replace’ with string to replace from last search string.\nType C-M-% to run ‘query-replace-regexp’ with the last search string.\nType M-s o to run ‘occur’ that shows the last search string.\nType M-s h r to run ‘highlight-regexp’ that highlights the last search string.\nType M-s h l to run ‘highlight-lines-matching-regexp’ that highlights lines\n matching the last search string.\n\nType C-h b to display all Isearch key bindings.\nType C-h k to display documentation of Isearch key.\nType C-h m to display documentation of Isearch mode.\n\nIf an input method is turned on in the current buffer, that input\nmethod is also active while you are typing characters to search.\nTo toggle the input method, type C-\\.  It also toggles the input\nmethod in the current buffer.\n\nTo use a different input method for searching, type C-^,\nand specify an input method you want to use.\n\nTo activate a transient input method, type C-x \\.\n\nThe above keys, bound in ‘isearch-mode-map’, are often controlled by\n options; do M-x apropos on search-.* to find them.\nOther control and meta characters terminate the search\n and are then executed normally (depending on ‘search-exit-option’).\nLikewise for function keys and mouse button events.\n\nIf this function is called non-interactively with a nil NO-RECURSIVE-EDIT,\nit does not return to the calling function until the search is done.\nSee the function ‘isearch-mode’ for more information.\n\n(fn &optional REGEXP-P NO-RECURSIVE-EDIT)",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-force-normal-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to normal state without recording current command.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-end-of-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the last character of the current screen line.\nIf COUNT is given, move COUNT - 1 screen lines downward first.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inclusive-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform expand transformation on inclusive from BEG to END with PROPERTIES.\n\nInclude the character under point.\nIf the end position is at the beginning of a line or the end of a\nline and `evil-want-visual-char-semi-exclusive', then:\n\n* If in visual state return `exclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-column-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT columns to the left.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition-functions": {
    "default": "(evil-goto-definition-imenu evil-goto-definition-semantic evil-goto-definition-xref evil-goto-definition-search)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "List of functions run until success by `evil-goto-definition'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-check-buffers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-direction": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The direction of the current search, either 'forward or 'backward.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-change-word-to-end": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `cw' behaves like `ce'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-make": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Call a build command in the current directory.\nIf ARG is nil this function calls `recompile', otherwise it calls\n`compile' passing ARG as build command.",
    "arglist": [
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quit-all-with-error-code": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exits Emacs without saving, returning an non-zero error code.\nThe FORCE argument is only there for compatibility and is ignored.\nThis function fails with an error if Emacs is run in server mode.",
    "arglist": [
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read a motion from the keyboard and return its buffer positions.\nThe return value is a list (BEG END), or (BEG END TYPE) if\nRETURN-TYPE is non-nil.",
    "arglist": [
      "&optional",
      "return-type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-flatten-syntax-tree": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find all paths from the root of TREE to its leaves.\nTREE is a syntax tree, i.e., all its leave nodes are strings.\nThe `nth' element in the result is the syntactic context\nfor the corresponding string index (counted from zero).",
    "arglist": [
      "tree"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument-types": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of argument handlers.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-switch-to-windows-last-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to current windows last open buffer.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-block-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return size of block from BEG to END with PROPERTIES.\n\nLike `inclusive', but for rectangles:\nthe last column is included.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-copy-chars-from-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return N characters from line NUM, starting at column COL.\nNUM is relative to the current line and can be negative.\nCOL defaults to the current column.",
    "arglist": [
      "n",
      "num",
      "&optional",
      "col"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-mode-abbrev-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Abbrev table for `evil-list-view-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-on-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-visual-char-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Type of default ex range in visual char state.\nIf non-nil the default range when starting an ex command from\ncharacter visual state is `<,`> otherwise it is '<,'>. In the\nfirst case the ex command will be passed a region covering only\nthe visual selection. In the second case the passed region will\nbe extended to contain full lines.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-pop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace the just-yanked stretch of killed text with a different stretch.\nThis command is allowed only immediatly after a `yank',\n`evil-paste-before', `evil-paste-after' or `evil-paste-pop'.\nThis command uses the same paste command as before, i.e., when\nused after `evil-paste-after' the new text is also yanked using\n`evil-paste-after', used with the same paste-count argument.\n\nThe COUNT argument inserts the COUNTth previous kill.  If COUNT\nis negative this is a more recent kill.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-magic": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Meaning which characters in a pattern are magic.\nThe meaning of those values is the same as in Vim. Note that it\nonly has influence if the Evil search module is chosen in\n`evil-search-module'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY with enabled undo.\nIf undo is disabled in the current buffer, the undo information\nis stored in `evil-temporary-undo' instead of `buffer-undo-list'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-select-quote-thing": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Selection THING as if it described a quoted object.\nTHING is typically either 'evil-quote or 'evil-chars. This\nfunction is called from `evil-select-quote'.",
    "arglist": [
      "thing",
      "beg",
      "end",
      "_type",
      "count",
      "&optional",
      "inclusive"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-enable-in-buffers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-resume": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to Insert state at previous insertion point.\nThe insertion will be repeated COUNT times. If called from visual\nstate, only place point at the previous insertion position but do not\nswitch to insert state.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-undo-system": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set `evil-undo-function' and `evil-redo-function` by SYSTEM.",
    "arglist": [
      "system"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-motion": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Current motion.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quit-all": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exits Emacs, asking for saving.",
    "arglist": [
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move lines in BEG END below line given by ADDRESS.",
    "arglist": [
      "beg",
      "end",
      "address"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shell-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute a shell command.\nIf BEG, END and TYPE is specified, COMMAND is executed on the region,\nwhich is replaced with the command's output. Otherwise, the\noutput is displayed in its own buffer. If PREVIOUS is non-nil,\nthe previous shell command is executed instead.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "command",
      "previous"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-u-scroll": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-u' scrolls up (like Vim).\nOtherwise, `C-u' applies a prefix argument.  The binding of\n`C-u' mirrors Emacs behaviour by default due to the relative\nubiquity of prefix arguments.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-height": {
    "default": 8,
    "local": null,
    "default-type": "integer",
    "var-docstring": "Height (in lines) of the command line window.\nSet to 0 to use the default height for `split-window'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--check-undo-system": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-start-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start a new search in a certain DIRECTION.",
    "arglist": [
      "direction",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-previous": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Goes the the previous occurrence.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-screen-line-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return size of screen-line from BEG to END with PROPERTIES.\n\nInclude whole lines, being aware of `visual-line-mode'\nwhen `evil-respect-visual-line-mode' is non-nil.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initializing-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether Evil is in the process of being initialized.",
    "arglist": [
      "&optional",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-split-next-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the window and goes to the COUNT-th next buffer in the buffer list.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-modes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Modes that should come up in Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The buffer in which the repeat started.\nIf the buffer is changed, the repeat is cancelled.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-decrease-width": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Decrease current window width by COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-substitute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change a character.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-overlays": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the list of active overlays of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-previous-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Complete a whole line.\nCalls `evil-complete-previous-line-func'.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-i-jump": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-i' jumps forward in the jump list (like Vim).\nOtherwise, `C-i' inserts a tab character.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-text-object-make-linewise": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Turn the text object selection RANGE to linewise.\nThe selection is adjusted in a sensible way so that the selected\nlines match the user intent. In particular, whitespace-only parts\nat the first and last lines are omitted. This function returns\nthe new range.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-minor-mode-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a keymap alist of minor-mode keymaps for STATE.",
    "arglist": [
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-interactive-form": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evaluate interactive forms ARGS.\nThe return value is a cons cell (FORM . PROPERTIES),\nwhere FORM is a single list-expression to be passed to\na standard `interactive' statement, and PROPERTIES is a\nlist of command properties as passed to `evil-define-command'.",
    "arglist": [
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-update-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the update-hook of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move backward to end of THING.\nThe motion is repeated COUNT times. This is the same as calling\n`evil-backward-end' with -COUNT.",
    "arglist": [
      "thing",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-lists": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate lists, removing duplicates.\nElements are compared with `eq'.",
    "arglist": [
      "&rest",
      "sequences"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-flash-timer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Timer for flashing search results.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-pop-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Same as `evil-repeat-pop', but with negative COUNT.",
    "arglist": [
      "count",
      "&optional",
      "save-point"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-member-if": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find the first item satisfying PREDICATE in LIST.\nStop when reaching POINTER, which should point at a link\nin the list.",
    "arglist": [
      "predicate",
      "list",
      "&optional",
      "pointer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of a string.\nQUOTE is the character delimiting the string. If COUNT is greater\nthan zero point is moved forward otherwise it is moved\nbackwards.",
    "arglist": [
      "quote",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-looking-at-end-comment": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns t if point is at the end of a comment.\npoint must be on one of the opening characters of a block comment\naccording to the current syntax table. Futhermore these\ncharacters must been parsed as opening characters, i.e. they\nwon't be considered as comment starters inside a string or\npossibly another comment. Point is moved right after the comment\ncloser if MOVE is non-nil.",
    "arglist": [
      "&optional",
      "move"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a range (BEG END) of COUNT delimited text objects.\nBEG END TYPE are the currently selected (visual) range.  The\ndelimited object must be given by THING-up function (see\n`evil-up-block').\n\nSELECTION-TYPE is symbol that determines which parts of the block\nare selected.  If it is 'inclusive or t OPEN and CLOSE are\nincluded in the range. If it is 'exclusive or nil the delimiters\nare not contained. If it is 'exclusive-line the delimiters are\nnot included as well as adjacent whitespace until the beginning\nof the next line or the end of the previous line. If the\nresulting selection consists of complete lines only and visual\nstate is not active, the returned selection is linewise.\n\nIf COUNTCURRENT is non-nil an objected is counted if the current\nselection matches that object exactly.\n\nUsually scanning for the surrounding block starts at (1+ beg)\nand (1- end). If this might fail due to the behavior of THING\nthen FIXEDSCAN can be set to t. In this case the scan starts at\nBEG and END. One example where this might fail is if BEG and END\nare the delimiters of a string or comment.",
    "arglist": [
      "thing",
      "beg",
      "end",
      "type",
      "count",
      "&optional",
      "selection-type",
      "countcurrent",
      "fixedscan"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-make-argument-handler": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "runner",
      "completer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-write-all": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves all buffers visiting a file.\nIf BANG is non nil then read-only buffers are saved, too,\notherwise they are skipped. ",
    "arglist": [
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-loop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Loop a certain number of times.\nEvaluate BODY repeatedly COUNT times with VAR bound to 1 or -1,\ndepending on the sign of COUNT. RESULT, if specified, holds\nthe number of unsuccessful iterations, which is 0 if the loop\ncompletes successfully. This is also the return value.\n\nEach iteration must move point; if point does not change,\nthe loop immediately quits. See also `evil-loop'.\n\n(fn (VAR COUNT [RESULT]) BODY...)",
    "arglist": [
      "spec",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-goto-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to POSITION in the buffer.\nDefault position is the beginning of the buffer.",
    "arglist": [
      "position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-macro-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The buffer that has been active on macro recording.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-overriding-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymaps that should override Evil maps.\nEntries have the form (MAP-VAR . STATE), where MAP-VAR is\na keymap variable and STATE is the state whose bindings\nshould be overridden. If STATE is nil, all states are\noverridden.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--next-flyspell-error": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "forwardp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-repeat-info-with-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the repeat-information REPEAT-INFO with the count of\nthe first command replaced by COUNT. The count is replaced if\nand only if COUNT is non-nil.",
    "arglist": [
      "count",
      "repeat-info"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-mode-syntax-table": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Syntax table for `evil-list-view-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-lines": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the lines in the region BEG and END into the kill-ring.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move by words.\nMoves point COUNT words forward or (- COUNT) words backward if\nCOUNT is negative. This function is the same as `forward-word'\nbut returns the number of words by which point could *not* be\nmoved.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-recording-current-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether we are recording the current command for repeat.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-start": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start recording a new repeat into `evil-repeat-info'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-modes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Modes that should come up in Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-modified-and-close": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the current buffer and closes the window.",
    "arglist": [
      "file",
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-double-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a double-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition-imenu": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find definition for STRING with imenu.",
    "arglist": [
      "string",
      "_position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether OBJECT is a range.",
    "arglist": [
      "object"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-word-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the next occurrence of word under the cursor.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank-handler": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the yank handler for MOTION.\nMOTION defaults to the current motion.",
    "arglist": [
      "&optional",
      "motion"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-last-insertion-and-stop-insert": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Paste last insertion and change to normal state.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Normal state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-record-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set `evil-repeat-buffer' to the current buffer.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-digraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Convert DIGRAPH to character or list representation.\nIf DIGRAPH is a list (CHAR1 CHAR2), return the corresponding character;\nif DIGRAPH is a character, return the corresponding list.\nSearches in `evil-digraphs-table-user' and `evil-digraphs-table'.",
    "arglist": [
      "digraph"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-idle-update": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Triggers the timer to update the highlights in the current buffer.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-eval-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "History of eval input, from the `=' register.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-word-or-subword-1": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-word-or-subword-1'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-end-undo-step": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "End a undo step started with `evil-start-undo-step'.\nAdds an undo boundary unless CONTINUE is specified.",
    "arglist": [
      "&optional",
      "continue"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-rot13": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "ROT13 encrypt text.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-change": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Executes as list of changes.\n\nCHANGES is a list of triples (REL-BEG INSERT-TEXT NDEL).\nREL-BEG is the relative position (to point) where the change\ntakes place. INSERT-TEXT is the text to be inserted at that\nposition and NDEL the number of characters to be deleted at that\nposition before insertion.\n\nREL-POINT is the relative position to point before the changed\nwhere point should be placed after all changes.",
    "arglist": [
      "changes",
      "rel-point"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-count-reset": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Sets `evil-scroll-count' to 0.\n`evil-scroll-up' and `evil-scroll-down' will scroll\nfor a half of the screen(default).",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-update-replace-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add CHARS-TO-DELETE chars to evil-replace-alist, starting at OPOINT.\nIf COUNT is greater than CHARS-TO-DELETE, pad the alist with nils.\nDecrement recorded position by optional offset, or 0.",
    "arglist": [
      "opoint",
      "count",
      "chars-to-delete",
      "&optional",
      "offset"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-plist-delete": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete by side effect the property PROP from PLIST.\nIf PROP is the first property in PLIST, there is no way\nto remove it by side-effect; therefore, write\n(setq foo (evil-plist-delete :prop foo)) to be sure of\nchanging the value of `foo'.",
    "arglist": [
      "prop",
      "plist"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-quoted-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Command that calls `read-quoted-char'.\nThis command can be used wherever `read-quoted-char' is required\nas a command. Its main use is in the `evil-read-key-map'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode-on-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-without-display": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY without Evil displays.\nInhibits echo area messages, mode line updates and cursor changes.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-set-custom-state-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Changes the list of special keymaps.\nVAR         is the variable containing the list of keymaps.\nPENDING-VAR is the variable containing the list of the currently pending\n            keymaps.\nKEY         the special symbol to be stored in the keymaps.\nMAKE        the creation function of the special keymaps.\nNEWLIST     the list of new special keymaps.",
    "arglist": [
      "var",
      "pending-var",
      "key",
      "_make",
      "newlist"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Motion state is enabled.\nUse the command `evil-motion-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-sentence": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-newline-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Inserts a new line below point and places point in that line\nwith regard to indentation.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--preceding-sexp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "In normal-state or motion-state, last sexp ends at point.",
    "arglist": [
      "command",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-regexp-search": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether to use regular expressions for searching in \\[evil-search-forward] and \\[evil-search-backward].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-move-far-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Closes the current window, splits the upper-left one vertically\nand redisplays the current buffer there.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-jumps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Display the contents of the jump list.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-half-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change cursor to a half-height box.\n(This is really just a thick horizontal bar.)",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-curly": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner curly bracket (\"brace\").",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-post-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Run after each COMMAND in Visual state.\nIf COMMAND is a motion, refresh the selection;\notherwise exit Visual state.",
    "arglist": [
      "&optional",
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-toggle-key": {
    "default": "C-z",
    "local": null,
    "default-type": "string",
    "var-docstring": "The key used to change to and from Emacs state.\nMust be readable by `read-kbd-macro'. For example: \"C-z\".",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-keybindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-parse-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as an Ex binding.",
    "arglist": [
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-paste": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Paste over Visual selection.",
    "arglist": [
      "count",
      "&optional",
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-next-func": {
    "default": "(closure (dabbrev-case-distinction dabbrev-search-these-buffers-only t) (arg) (require 'dabbrev) (let ((dabbrev-search-these-buffers-only (if evil-complete-all-buffers nil (list (current-buffer)))) dabbrev-case-distinction) (condition-case nil (if (eq last-command this-command) (dabbrev-expand nil) (dabbrev-expand (- (abs (or arg 1))))) (error (dabbrev-expand nil)))))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Completion function used by \\<evil-insert-state-map>\\[evil-complete-next].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-back-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a back-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-close-fold": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Close fold at point.\nSee also `evil-open-fold'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Echo area message for Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-backspace": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore character under cursor.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initial-state-for-buffer-name": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the initial Evil state to use for a buffer with name NAME.\nMatches the name against the regular expressions in\n`evil-buffer-regexps'. If none matches, returns DEFAULT.",
    "arglist": [
      "&optional",
      "name",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-previous": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the last search in the opposite direction.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-goal-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restores the goal column after execution of BODY.\nSee also `evil-save-column'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-interactive-search-highlight": {
    "default": "all-windows",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Determine in which windows the interactive highlighting should be shown.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-visual-newline-commands": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the value of `evil-visual-newline-commands'.\nSetting this variable changes the properties of the appropriate\ncommands.",
    "arglist": [
      "var",
      "value"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-forward-history": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "History of forward searches.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse--remap-link-click-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "start-event",
      "end-event"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-esc-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Non-nil if `evil-esc-mode' is enabled.",
    "fn-docstring": "Toggle interception of \\e (escape).\nEnable with positive ARG and disable with negative ARG.\n\nWhen enabled, `evil-esc-mode' modifies the entry of \\e in\n`input-decode-map'. If such an event arrives, it is translated to\na plain 'escape event if no further event occurs within\n`evil-esc-delay' seconds. Otherwise no translation happens and\nthe ESC prefix map (i.e. the map originally bound to \\e in\n`input-decode-map`) is returned.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-kill-on-visual-paste": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether pasting in visual state adds the replaced text to the\nkill ring, making it the default for the next paste. The default,\nreplicates the default Vim behavior.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-backward-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete previous word.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-invert-case": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Invert case of text.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-set-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Bind KEY to DEF in STATE in the current buffer.",
    "arglist": [
      "state",
      "key",
      "def"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Prefix STRING with the search prompt.",
    "arglist": [
      "string",
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-screen-line-contract": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform contract transformation on screen-line from BEG to END with PROPERTIES.\n\nInclude whole lines, being aware of `visual-line-mode'\nwhen `evil-respect-visual-line-mode' is non-nil.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-restore-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore the mark, including whether it was transient.\nSee also `evil-save-mark'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-contract-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The inverse of `evil-visual-expand-region'.\nCreate a Visual selection that expands to the current region.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Called to record a search command.\nFLAG is either 'pre or 'post if the function is called before resp.\nafter executing the command.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-regex-case": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the case as implied by \\c or \\C in regular expression RE.\nIf \\c appears anywhere in the pattern, the pattern is case\ninsensitive. If \\C appears, the pattern is case sensitive.\nOnly the first occurrence of \\c or \\C is used, all others are\nignored. If neither \\c nor \\C appears in the pattern, the case\nspecified by DEFAULT-CASE is used. DEFAULT-CASE should be either\n`sensitive', `insensitive' or `smart'. In the latter case, the pattern\nwill be case-sensitive if and only if it contains an upper-case\nletter, otherwise it will be case-insensitive.",
    "arglist": [
      "re",
      "default-case"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-update-pending-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Tries to set pending special keymaps.\nThis function should be called from an `after-load-functions'\nhook.",
    "arglist": [
      "&optional",
      "_file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-narrow-to-field": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Narrow to the current field.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-expression": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The evaluation tree.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-overlay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-open-fold-rec": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open fold at point recursively.\nSee also `evil-open-fold' and `evil-close-fold'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exit-emacs-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exit Emacs state.\nChanges the state to the previous state, or to Normal state\nif the previous state was Emacs state.",
    "arglist": [
      "&optional",
      "buffer",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Starts a forward search.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-symbol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return word near point as a string.\nIf FORWARD is nil, search backward, otherwise forward.  Returns\nnil if nothing is found.",
    "arglist": [
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-run-pending-custom-initialize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Executes the pending initializations.\nSee `evil-pending-custom-initialize'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-delete-or-yank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute evil-delete or evil-yank on the given region.\nIf SHOULD-DELETE is t, evil-delete will be executed, otherwise\nevil-yank.\nThe region specified by BEG and END will be adjusted if COUNT is\ngiven.",
    "arglist": [
      "should-delete",
      "beg",
      "end",
      "type",
      "register",
      "count",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-ignore-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be nonrepeatable.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-case": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The case behaviour of the search command.\nSmart case means that the pattern is case sensitive if and only\nif it contains an upper case letter, otherwise it is case\ninsensitive. If nil then the setting of `evil-ex-search-case' is\nused.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normalize-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Normalize RANGE according to its type.\nReturn a new range if COPY is non-nil.",
    "arglist": [
      "range",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return word near point as a string.\nIf FORWARD is nil, search backward, otherwise forward.  Returns\nnil if nothing is found.",
    "arglist": [
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be repeatable.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-w-in-emacs-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-w' prefixes windows commands in Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-ring--cmacro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "compiler-macro for inlining `evil-jumps-struct-ring'.",
    "arglist": [
      "_cl-whole-arg",
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-count-lines": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return absolute line-number-difference betweeen `beg` and `end`.\nThis should give the same results no matter where on the line `beg`\nand `end` are.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-re-bwd": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search backward for PATTERN.\nReturns the line number of the match.",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-setup": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Initialize Ex minibuffer.\nThis function registers several hooks that are used for the\ninteractive actions during ex state.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-contract-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Contract RANGE according to its type.\nReturn a new range if COPY is non-nil.",
    "arglist": [
      "range",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-with-predicate": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute a search with a predicate function.\nSEARCH-FUN is a search function (e.g. `re-search-forward') and\nPREDICATE is a two-argument function satisfying the interface of\n`isearch-filter-predicate', or `nil'.  STRING, BOUND, NOERROR and\nCOUNT are passed unchanged to SEARCH-FUN.  The first match\nsatisfying the predicate (or `nil') is returned.",
    "arglist": [
      "search-fun",
      "pred",
      "string",
      "bound",
      "noerror",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-prompt": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "String to use for search prompt.",
    "fn-docstring": "Return the search prompt for the given direction.",
    "arglist": [
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-local-var": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define SYMBOL as permanent buffer local variable, and return SYMBOL.\nThe parameters are the same as for `defvar', but the variable\nSYMBOL is made permanent buffer local.",
    "arglist": [
      "symbol",
      "&optional",
      "initvalue",
      "docstring"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-define-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define a motion command MOTION.\nARGS is a list of arguments.  Motions can have any number of\narguments, but the first (if any) has the predefined meaning of\ncount.  BODY must execute the motion by moving point.\n\nOptional keyword arguments are:\n- `:type' - determines how the motion works after an operator (one of\n  `inclusive', `line', `block' and `exclusive', or a self-defined\n  motion type)\n- `:jump' - if non-nil, the previous position is stored in the jump\n  list, so that it can be restored with \\<evil-motion-state-map>\\[evil-jump-backward]\n\n(fn MOTION (COUNT ARGS...) DOC [[KEY VALUE]...] BODY...)",
    "arglist": [
      "motion",
      "args",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-operator-state-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-inner-symbol": "i o",
      "evil-inner-tag": "i t",
      "evil-inner-back-quote": "i `",
      "evil-inner-double-quote": "i \"",
      "evil-inner-single-quote": "i '",
      "evil-inner-angle": "i >",
      "evil-inner-angle": "i >",
      "evil-inner-curly": "i }",
      "evil-inner-curly": "i }",
      "evil-inner-curly": "i }",
      "evil-inner-bracket": "i ]",
      "evil-inner-bracket": "i ]",
      "evil-inner-paren": "i )",
      "evil-inner-paren": "i )",
      "evil-inner-paren": "i )",
      "evil-inner-paragraph": "i p",
      "evil-inner-sentence": "i s",
      "evil-inner-WORD": "i W",
      "evil-inner-word": "i w",
      "evil-a-symbol": "a o",
      "evil-a-tag": "a t",
      "evil-a-back-quote": "a `",
      "evil-a-double-quote": "a \"",
      "evil-a-single-quote": "a '",
      "evil-an-angle": "a >",
      "evil-an-angle": "a >",
      "evil-a-curly": "a }",
      "evil-a-curly": "a }",
      "evil-a-curly": "a }",
      "evil-a-bracket": "a ]",
      "evil-a-bracket": "a ]",
      "evil-a-paren": "a )",
      "evil-a-paren": "a )",
      "evil-a-paren": "a )",
      "evil-a-paragraph": "a p",
      "evil-a-sentence": "a s",
      "evil-a-WORD": "a W",
      "evil-a-word": "a w"
    }
  },
  "evil-local-keymaps-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of keymap variables that must be\nreinitialized in each buffer. Entries have the form\n(MODE . KEYMAP), where KEYMAP is the variable containing\nthe keymap for MODE.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-range-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set RANGE's properties to PROPERTIES.\nIf COPY is non-nil, return a copy of RANGE.",
    "arglist": [
      "range",
      "properties",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-swap-out-markers": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Turn markers into file references when the buffer is killed.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-display-shell-error-in-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Show error output of a shell command in the error buffer.\nIf this variable is non-nil the error output of a shell command\ngoes to the messages buffer instead of being mixed with the\nregular output. This happens only if the exit status of the\ncommand is non-zero.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-lookup": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Look up the keyword at point.\nCalls `evil-lookup-func'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-newline-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Inserts a new line above point and places point in that line\nwith regard to indentation.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-split": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the current window horizontally, COUNT lines height,\nediting a certain FILE. The new window will be created below\nwhen `evil-split-window-below' is non-nil. If COUNT and\n`evil-auto-balance-windows' are both non-nil then all children\nof the parent of the splitted window are rebalanced.",
    "arglist": [
      "&optional",
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-char-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Characterwise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-complete-previous-minibuffer-func": {
    "default": "minibuffer-complete",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Minibuffer completion function used by \\<evil-insert-state-map>\\[evil-complete-previous].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-ring": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "A ring of repeat-informations to repeat the last command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-integration": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to load evil-integration.el.\nThis variable must be set before Evil is loaded.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-downcase": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Convert text to lower case.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-set-width": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Sets the width of the current window to COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-x-select-timeout": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Time in seconds for the update of the X selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Insert state is enabled.\nUse the command `evil-insert-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-word-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Jump visually to the beginning of a word using ace-jump.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-different-buffer-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the buffer has changed in a repeat.\nIf STRICT is non-nil, returns t if the previous buffer\nis unknown; otherwise returns t only if the previous\nbuffer is known and different from the current buffer.",
    "arglist": [
      "&optional",
      "strict"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a STATE binding from KEY to DEF for KEYMAP.\nSTATE is one of `normal', `insert', `visual', `replace',\n`operator', `motion', `emacs', or a list of one or more of\nthese. Omitting a state by using `nil' corresponds to a standard\nEmacs binding using `define-key'. The remaining arguments are\nlike those of `define-key'. For example:\n\n    (evil-define-key 'normal foo-map \"a\" 'bar)\n\nThis creates a binding from `a' to `bar' in normal state, which\nis active whenever `foo-map' is active. Using nil for the state,\nthe following lead to identical bindings:\n\n    (evil-define-key nil foo-map \"a\" 'bar)\n    (define-key foo-map \"a\" 'bar)\n\nIt is possible to specify multiple states and/or bindings at\nonce:\n\n    (evil-define-key '(normal visual) foo-map\n      \"a\" 'bar\n      \"b\" 'foo)\n\nIf `foo-map' has not been initialized yet, this macro adds an\nentry to `after-load-functions', delaying execution as necessary.\n\nKEYMAP may also be a quoted symbol. If the symbol is `global', the\nglobal evil keymap corresponding to the state(s) is used, meaning\nthe following lead to identical bindings:\n\n    (evil-define-key 'normal 'global \"a\" 'bar)\n    (evil-global-set-key 'normal \"a\" 'bar)\n\nThe symbol `local' may also be used, which corresponds to using\n`evil-local-set-key'. If a quoted symbol is used that is not\n`global' or `local', it is assumed to be the name of a minor\nmode, in which case `evil-define-minor-mode-key' is used.",
    "arglist": [
      "state",
      "keymap",
      "key",
      "def",
      "&rest",
      "bindings"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-with-transient-mark-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY with Transient Mark mode.\nThen restore Transient Mark mode to its previous setting.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-sort-completions": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "completions"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-highlight-closing-paren-at-point-states": {
    "default": "(not emacs insert replace)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "The states in which the closing parenthesis at point should be highlighted.\nAll states listed here highlight the closing parenthesis at\npoint (which is Vim's default behavior).  All others highlight the\nparenthesis before point (which is Emacs default behavior). If\nthis list contains the symbol `not' then its meaning is inverted,\ni.e. all states listed here highlight the closing parenthesis\nbefore point.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-macros": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the pattern of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-info-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-change-to-initial-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change the state of BUFFER to its initial state.\nThis is the state the buffer came up in. If Evil is not activated\nthen this function does nothing.",
    "arglist": [
      "&optional",
      "buffer",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exclusive-normalize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform normalize transformation on exclusive from BEG to END with PROPERTIES.\n\nReturn the positions unchanged, with some exceptions.\nIf the end position is at the beginning of a line, then:\n\n* If the beginning position is at or before the first non-blank\n  character on the line, return `line' (expanded).\n\n* Otherwise, move the end position to the end of the previous\n  line and return `inclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-activate-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Visual state if the region is activated.",
    "arglist": [
      "&optional",
      "_command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-posn-x-y": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the x and y coordinates in POSITION.\nThis function returns y offset from the top of the buffer area including\nthe header line and the tab line (on Emacs 27 and later versions).\n\nOn Emacs 24 and later versions, the y-offset returned by\n`posn-at-point' is relative to the text area excluding the header\nline and the tab line, while y offset taken by `posn-at-x-y' is relative to\nthe buffer area including the header line and the tab line.\nThis asymmetry is by design according to GNU Emacs team.\nThis function fixes the asymmetry between them.\n\nLearned from mozc.el.",
    "arglist": [
      "position"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument-handler-runner": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "arg-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-count": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The explicit count passed to an command starting Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-word-1-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-word-1-above'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-setup": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Hook to initialize the minibuffer for ex search.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-find-next-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Look for the next occurrence of PATTERN in a certain DIRECTION.\nNote that this function ignores the whole-line property of PATTERN.",
    "arglist": [
      "pattern",
      "&optional",
      "direction"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-after-load-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Functions to be run when loading of Evil is finished.\nThis hook can be used the execute some initialization routines\nwhen Evil is completely loaded.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-type-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Specifications made by `evil-define-type'.\nEntries have the form (TYPE . PLIST), where PLIST is a property\nlist specifying functions for handling the type: expanding it,\ndescribing it, etc.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse-drag-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the region to the text that the mouse is dragged over.\nHighlight the drag area as you move the mouse.\nThis must be bound to a button-down mouse event.\n\nIf the click is in the echo area, display the `*Messages*' buffer.\n\nSTART-EVENT should be the event that started the drag.",
    "arglist": [
      "start-event"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Operator-Pending state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-set-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the pattern of the highlight HL to PATTERN.",
    "arglist": [
      "hl",
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Visual state is enabled.\nUse the command `evil-visual-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-repeat-info": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY, protecting the values of repeat variables.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a tag block.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-default-cursor": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The default cursor.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-start-word-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the symbol under point.\nThe search matches the COUNT-th occurrence of the word.  If the\nUNBOUNDED argument is nil, the search matches only at symbol\nboundaries, otherwise it matches anywhere.  The DIRECTION\nargument should be either `forward' or `backward', determining\nthe search direction. If SYMBOL is non-nil then the functions\nsearches for the symbol at point, otherwise for the word at\npoint.",
    "arglist": [
      "unbounded",
      "direction",
      "count",
      "&optional",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Replace state is enabled.\nUse the command `evil-replace-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cross-lines": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether horizontal motions may move to other lines.  If non-nil,\ncertain motions that conventionally operate in a single line may move\nthe cursor to other lines.  Otherwise, they are restricted to the\ncurrent line.  This applies to \\[evil-backward-char], \\[evil-forward-char], \\[evil-find-char], \\[evil-find-char-backward], \\[evil-find-char-to], \\[evil-find-char-to-backward], \\<evil-normal-state-map>\\[evil-invert-char].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-unbounded-word-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the next occurrence of word under the cursor.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-append-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to Insert state at the end of the current line.\nThe insertion will be repeated COUNT times.  If VCOUNT is non nil\nit should be number > 0. The insertion will be repeated in the\nnext VCOUNT - 1 lines below the current one.",
    "arglist": [
      "count",
      "&optional",
      "vcount"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-line-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Linewise selection.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-move-cursor": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-normal-state-map>\nWhether repeating commands with \\[evil-repeat] may move the cursor.\nIf nil, the original cursor position is preserved, even if the command\nnormally would have moved the cursor.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-block-overlays": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Overlays for Visual Block selection, one for each line.\nThey are reused to minimize flicker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-line-to-bottom": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls line number COUNT (or the cursor line) to the bottom of the window.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ret": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines down.\nIf point is on a widget or a button, click on it.\nIn Insert state, insert a newline.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-highlight": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Highlight Visual selection, depending on the Visual type.\nWith negative ARG, disable highlighting.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-init-esc": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update `input-decode-map' in terminal.",
    "arglist": [
      "frame"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-quote-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The character to be used by `forward-evil-quote'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-back-to-indentation": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete back to the first non-whitespace character.\nIf point is before the first non-whitespace character of a\ncurrent line then delete from the point to the beginning of the\ncurrent line.  If point is on the beginning of the line, behave\naccording to `evil-backspace-join-lines'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-ignored-file-patterns": {
    "default": "(\"COMMIT_EDITMSG$\" \"TAGS$\")",
    "local": null,
    "default-type": "cons",
    "var-docstring": "A list of pattern regexps to match on the file path to exclude from being included in the jump list.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-visual-char-semi-exclusive": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Visual character selection to beginning/end of line is exclusive.\nIf non nil then an inclusive visual character selection which\nends at the beginning or end of a line is turned into an\nexclusive selection. Thus if the selected (inclusive) range ends\nat the beginning of a line it is changed to not include the first\ncharacter of that line, and if the selected range ends at the end\nof a line it is changed to not include the newline character of\nthat line.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-last-insertion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Paste last insertion.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-prev": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the previous window in the cyclic order.\nWith COUNT go to the count-th window in the order starting from\ntop-left.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-message": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create an echo area message for SELECTION.\nSELECTION is a kind of selection as defined by\n`evil-define-visual-selection', such as `char', `line'\nor `block'.",
    "arglist": [
      "&optional",
      "selection"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-custom-initialize-pending-reset": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add a pending customization with `custom-initialize-reset'.",
    "arglist": [
      "var",
      "value"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-not-thing": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of the complement of THING.",
    "arglist": [
      "thing",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Undo COUNT changes in buffer using `evil-undo-function'.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-line-tag": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Mode-Line indicator for the current state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-shortcut-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Keymap for Operator-Pending shortcuts like \"dd\" and \"gqq\".",
    "fn-docstring": "Keymap for Operator-Pending shortcuts like \"dd\" and \"gqq\".",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Normal state is enabled.\nUse the command `evil-normal-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normalize-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a buffer-local value for `evil-mode-map-alist'.\nThis is a keymap alist, determined by the current state\n(or by STATE if specified).",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-line-format": {
    "default": "before",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The position of the state tag in the mode line.\nIf set to `before' or `after', the tag is placed at the beginning\nor the end of the mode-line, respectively.  If nil, there is no\ntag.  Otherwise it should be a cons cell (WHERE . WHICH), where\nWHERE is either `before' or `after', and WHICH is a symbol in\n`mode-line-format'.  The tag is then placed before or after that\nsymbol, respectively.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-echo-area": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the echo area; execute BODY; restore the echo area.\nIntermittent messages are not logged in the *Messages* buffer.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-search-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The count if the current search.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Emacs state is enabled.\nUse the command `evil-emacs-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-make-hl": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a new highlight object with name NAME and properties ARGS.\nThe following properties are supported:\n:face The face to be used for the highlighting overlays.\n:win The window in which the highlighting should be shown.\n     Note that the highlight will be visible in all windows showing\n     the corresponding buffer, but only the matches visible in the\n     specified window will actually be highlighted. If :win is nil,\n     the matches in all windows will be highlighted.\n:min The minimal buffer position for highlighted matches.\n:max The maximal buffer position for highlighted matches.\n:match-hook A hook to be called once for each highlight.\n            The hook must take two arguments, the highlight and\n            the overlay for that highlight.\n:update-hook A hook called once after updating the highlighting\n             with two arguments, the highlight and a message string\n             describing the current match status.",
    "arglist": [
      "name",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return end of RANGE.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-nohighlight": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Disable the active search highlightings.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-paragraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner paragraph.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-increase-height": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Increase current window height by COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-type-modified": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil iff current motion type has been modified by the user.\nIf the type has been modified, this variable contains the new\ntype.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-keys": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The keys that invoked the current command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-re-fwd": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search forward for PATTERN.\nReturns the line number of the match.",
    "arglist": [
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Major mode for the Evil command line window.\n\nThis mode runs the hook `evil-command-window-mode-hook', as the final\nor penultimate step during initialization.\n\n\\{evil-command-window-mode-map}",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initialize-local-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Initialize a buffer-local value for local keymaps as necessary.\nThe initial value is that of `make-sparse-keymap'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Visual state.\n(That is, whether `evil-state' is `visual'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-echo-state": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to signal the current state in the echo area.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-active": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-file-arg": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns the current Ex argument as a file name.\nThis function interprets special file names like # and %.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-record-change": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Record the current buffer changes during a repeat.\nIf CHANGE is specified, it is added to `evil-repeat-changes'.",
    "arglist": [
      "relpos",
      "ins",
      "ndel"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current buffer to FILENAME.\nChanges the file name of the current buffer to FILENAME.  If no\nFILENAME is given, the current file name is used.",
    "arglist": [
      "filename",
      "&optional",
      "bang"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-refresh-undo-step": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Refresh `buffer-undo-list' entries for current undo step.\nUndo boundaries until `evil-undo-list-pointer' are removed to\nmake the entries undoable as a single action. See\n`evil-start-undo-step'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-buffer-targets": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Regexp to match against `buffer-name' to determine whether it's a valid jump target.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-concat-charsets": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Concatenate character sets.\nA character set is the part between [ and ] in a regular expression.\nIf any character set is complemented, the result is also complemented.",
    "arglist": [
      "&rest",
      "sets"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-modes": {
    "default": "(5x5-mode archive-mode bbdb-mode biblio-selection-mode blackbox-mode bookmark-bmenu-mode bookmark-edit-annotation-mode browse-kill-ring-mode bs-mode bubbles-mode bzr-annotate-mode calc-mode cfw:calendar-mode completion-list-mode Custom-mode custom-theme-choose-mode debugger-mode delicious-search-mode desktop-menu-blist-mode desktop-menu-mode doc-view-mode dun-mode dvc-bookmarks-mode dvc-diff-mode dvc-info-buffer-mode dvc-log-buffer-mode dvc-revlist-mode dvc-revlog-mode dvc-status-mode dvc-tips-mode ediff-mode ediff-meta-mode efs-mode Electric-buffer-menu-mode emms-browser-mode emms-mark-mode emms-metaplaylist-mode emms-playlist-mode ess-help-mode etags-select-mode fj-mode gc-issues-mode gdb-breakpoints-mode gdb-disassembly-mode gdb-frames-mode gdb-locals-mode gdb-memory-mode gdb-registers-mode gdb-threads-mode gist-list-mode git-rebase-mode gnus-article-mode gnus-browse-mode gnus-group-mode gnus-server-mode gnus-summary-mode gomoku-mode google-maps-static-mode ibuffer-mode jde-javadoc-checker-report-mode magit-cherry-mode magit-diff-mode magit-log-mode magit-log-select-mode magit-popup-mode magit-popup-sequence-mode magit-process-mode magit-reflog-mode magit-refs-mode magit-revision-mode magit-stash-mode magit-stashes-mode magit-status-mode mh-folder-mode monky-mode mpuz-mode mu4e-main-mode mu4e-headers-mode mu4e-view-mode notmuch-hello-mode notmuch-search-mode notmuch-show-mode notmuch-tree-mode occur-mode org-agenda-mode package-menu-mode pdf-outline-buffer-mode pdf-view-mode proced-mode rcirc-mode rebase-mode recentf-dialog-mode reftex-select-bib-mode reftex-select-label-mode reftex-toc-mode sldb-mode slime-inspector-mode slime-thread-control-mode slime-xref-mode snake-mode solitaire-mode sr-buttons-mode sr-mode sr-tree-mode sr-virtual-mode tar-mode tetris-mode tla-annotate-mode tla-archive-list-mode tla-bconfig-mode tla-bookmarks-mode tla-branch-list-mode tla-browse-mode tla-category-list-mode tla-changelog-mode tla-follow-symlinks-mode tla-inventory-file-mode tla-inventory-mode tla-lint-mode tla-logs-mode tla-revision-list-mode tla-revlog-mode tla-tree-lint-mode tla-version-list-mode twittering-mode urlview-mode vc-annotate-mode vc-dir-mode vc-git-log-view-mode vc-hg-log-view-mode vc-svn-log-view-mode vm-mode vm-summary-mode w3m-mode wab-compilation-mode xgit-annotate-mode xgit-changelog-mode xgit-diff-mode xgit-revlog-mode xhg-annotate-mode xhg-log-mode xhg-mode xhg-mq-mode xhg-mq-sub-mode xhg-status-extra-mode)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Modes that should come up in Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-invert-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Invert case of character.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jump-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to newer position in jump list.\nTo go the other way, press \\<evil-motion-state-map>\\[evil-jump-backward].",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-active-highlights-alist": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "An alist of currently active highlights.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-shortcut-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Keymap for Operator-Pending shortcuts like \"dd\" and \"gqq\".",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-right-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shift the current line COUNT times to the right.\nThe text is shifted to the nearest multiple of\n`evil-shift-width'. Like `evil-shift-right' but always works on\nthe current line.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Normal state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.\n\nAKA \"Command\" state.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-single-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a single-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-set-initial-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the initial state for the current major mode to STATE.\nThis is the state the buffer comes up in. See `evil-set-initial-state'.",
    "arglist": [
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-resize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The ex :resize command.\n\nIf ARG is a signed positive integer, increase the current window\nheight by ARG.\n\nIf ARG is a signed negative integer, decrease the current window\nheight by ARG.\n\nIf ARG is a positive integer without explicit sign, set the current\nwindow height to ARG.\n\nIf ARG is empty, maximize the current window height.",
    "arglist": [
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-echo-area-restore": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore the echo area from `evil-echo-area-message'.\nDoes not restore if `evil-write-echo-area' is non-nil.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-prev-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Goes to the `count'-th prev buffer in the buffer list.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-paren-range": {
    "default": 0,
    "local": null,
    "default-type": "integer",
    "var-docstring": "The minimal distance between point and a parenthesis\nwhich causes the parenthesis to be highlighted.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-echo-overlay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Overlay used for displaying info messages during ex.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return contents of REGISTER.\nSignal an error if empty, unless NOERROR is non-nil.\n\nThe following special registers are supported.\n  \"  the unnamed register\n  *  the clipboard contents\n  +  the clipboard contents\n  <C-w> the word at point (ex mode only)\n  <C-a> the WORD at point (ex mode only)\n  <C-o> the symbol at point (ex mode only)\n  <C-f> the current file at point (ex mode only)\n  %  the current file name (read only)\n  #  the alternate file name (read only)\n  /  the last search pattern (read only)\n  :  the last command line (read only)\n  .  the last inserted text (read only)\n  -  the last small (less than a line) delete\n  _  the black hole register\n  =  the expression register (read only)",
    "arglist": [
      "register",
      "&optional",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-ring": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Access slot \"ring\" of `evil-jumps-struct' struct CL-X.",
    "arglist": [
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transient-vals": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of old values for Transient Mark mode variables.\nEntries have the form (VARIABLE VALUE LOCAL), where LOCAL is\nwhether the variable was previously buffer-local.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cjk-emacs-word-boundary": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Determine word boundary exactly the same way as Emacs does.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-push": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Pushes the current cursor/file position to the jump list.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-page-up": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT pages upwards.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-small-deletion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last piece of deleted text.\nThe text should be less than a line.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-parser--dval": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Substitute all dollar-sign symbols in OBJ.\nEach dollar-sign symbol is replaced with the corresponding\nelement in RESULT, so that $1 becomes the first element, etc.\nThe special value $0 is substituted with the whole list RESULT.\nIf RESULT is not a list, all dollar-sign symbols are substituted with\nRESULT.",
    "arglist": [
      "obj",
      "result"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The current argument of the Ex command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-goto-entry": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-update-x-selection-p": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether to update the X PRIMARY selection with the current visual region automatically.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-append-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Append TEXT to the contents of register REGISTER.",
    "arglist": [
      "register",
      "text"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-remove-default": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Remove the default text shown in the ex minibuffer.\nWhen ex starts, the previous command is shown enclosed in\nparenthesis. This function removes this text when the first key\nis pressed.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-char-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Jump visually directly to a char using ace-jump.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the contents of register REGISTER to TEXT.\nIf REGISTER is an upcase character then text is appended to that\nregister instead of replacing its content.",
    "arglist": [
      "register",
      "text"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-unquote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return EXP unquoted.",
    "arglist": [
      "exp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-sentence": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-abort": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Cancel ex state when another buffer is selected.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Normal state is enabled.\nUse the command `evil-normal-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-get-current": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "&optional",
      "window"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Inserts the contents of FILE below the current line or line COUNT.",
    "arglist": [
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return properties of RANGE.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--flyspell-overlays-in-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-col-0-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set MARK at column 0 of line of END. Default is cursor line.",
    "arglist": [
      "beg",
      "end",
      "mark"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-offset": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last search offset.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-redo-function": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Function to be used by 'evil-redo'.\nCustomized via `evil-undo-system'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-refresh-mode-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Refresh mode line tag.",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-skip-empty-lines": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Non-nil of the current insertion should not take place on\n  lines at which the insertion point is behind the end of the\n  line.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-leader": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set KEY to trigger leader bindings in STATE.\nKEY should be in the form produced by `kbd'. STATE is one of\n`normal', `insert', `visual', `replace', `operator', `motion',\n`emacs', a list of one or more of these, or `nil', which means\nall of the above. If LOCALLEADER is non-nil, set the local leader\ninstead.",
    "arglist": [
      "state",
      "key",
      "&optional",
      "localleader"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-bottom": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to line COUNT from the bottom of the window.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-pop": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace the just repeated command with a previously executed command.\nOnly allowed after `evil-repeat', `evil-repeat-pop' or\n`evil-repeat-pop-next'. Uses the same repeat count that\nwas used for the first repeat.\n\nThe COUNT argument inserts the COUNT-th previous kill.\nIf COUNT is negative, this is a more recent kill.",
    "arglist": [
      "count",
      "&optional",
      "save-point"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-pos": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The position of point at the beginning of an change-tracking\n  editing command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normalize-position": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return POS if it does not exceed the buffer boundaries.\nIf POS is less than `point-min', return `point-min'.\nIs POS is more than `point-max', return `point-max'.\nIf POS is a marker, return its position.",
    "arglist": [
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-split-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits window and switches to another buffer.",
    "arglist": [
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the `selected-window' to SIDE.\nThe state of the `selected-window' is saved along with the state\nof the window tree consisting of all the other windows. Then, all\nwindows are deleted, the remaining window is split according to\nSIDE, the state of the window at SIDE is replaced with the saved\nstate of the `selected-window', and, finally, the state of the\nsaved window tree is reconstructed on the opposite side.\n\nSIDE has the same meaning as in `split-window'.\n\nNote, this function only operates on the window tree rooted in\nthe frame's main window and effectively preserves any side\nwindows (i.e. windows with a valid window-side window\nparameter).",
    "arglist": [
      "side"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-bottom-line-to-top": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the line right below the window,\nor line COUNT to the top of the window.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-temporary-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "When undo is disabled in current buffer.\nCertain commands depending on undo use this variable\ninstead of `buffer-undo-list'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-copy": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Copy lines in BEG END below line given by ADDRESS.",
    "arglist": [
      "beg",
      "end",
      "address"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-not-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be nonrepeatable.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-delete": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex delete command.\n[BEG,END]delete [REGISTER] [COUNT]",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "count",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cjk-word-combining-categories": {
    "default": "((nil . 94) (94) (114 . 107) (114 . 65) (114 . 71) (107 . 114) (107 . 65) (107 . 71) (65 . 114) (65 . 107) (65 . 71) (71 . 114) (71 . 107) (71 . 65))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "List of pair (cons) of categories to determine word boundary\nused in `evil-cjk-word-boundary-p'. See the documentation of\n`word-combining-categories'. Use `describe-categories' to see the\nlist of categories.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-end-and-return-macro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Like `kmacro-end-macro' but also return the macro.\nRemove \\<evil-insert-state-map>\\[evil-execute-in-normal-state] from the end.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-install-or-uninstall": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-keymap-prompt": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the prompt-string of MAP to PROMPT.",
    "arglist": [
      "map",
      "prompt"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-add-command-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add PROPERTIES to COMMAND.\nPROPERTIES should be a property list.\nTo replace all properties at once, use `evil-set-command-properties'.",
    "arglist": [
      "command",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-middle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the middle line in the window.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set RANGE to have beginning BEG and end END.\nThe TYPE and additional PROPERTIES may also be specified.\nIf an argument is nil, it's not used; the previous value is retained.\nSee also `evil-set-range-beginning', `evil-set-range-end',\n`evil-set-range-type' and `evil-set-range-properties'.",
    "arglist": [
      "range",
      "&optional",
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-modes": {
    "default": "(apropos-mode Buffer-menu-mode calendar-mode color-theme-mode command-history-mode compilation-mode dictionary-mode ert-results-mode help-mode Info-mode Man-mode speedbar-mode undo-tree-visualizer-mode woman-mode)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Modes that should come up in Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-full-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for a full search pattern PATTERN-STRING in DIRECTION.\nThis function split PATTERN-STRING in\npattern/offset/;next-pattern parts and performs the search in\nDIRECTION which must be either 'forward or 'backward. The first\nsearch is repeated COUNT times. If the pattern part of\nPATTERN-STRING is empty, the last global pattern stored in\n`evil-ex-search-pattern' is used instead if in addition the\noffset part is nil (i.e. no pattern/offset separator), the last\nglobal offset stored in `evil-ex-search-offset' is used as\noffset. The current match data will correspond to the last\nsuccessful match.  This function returns a triple (RESULT PATTERN\nOFFSET) where RESULT is\n\n  t              the search has been successful without wrap\n  'wrap          the search has been successful with wrap\n  'empty-pattern the last pattern has been empty\n  nil            the search has not been successful\n\nand PATTERN and OFFSET are the last pattern and offset this\nfunction searched for. Note that this function does not handle\nany error conditions.",
    "arglist": [
      "pattern-string",
      "count",
      "direction"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-local-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Operator-Pending state is enabled.\nUse the command `evil-operator-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Operator-Pending state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inclusive-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return size of inclusive from BEG to END with PROPERTIES.\n\nInclude the character under point.\nIf the end position is at the beginning of a line or the end of a\nline and `evil-want-visual-char-semi-exclusive', then:\n\n* If in visual state return `exclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Insert state is enabled.\nUse the command `evil-insert-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-buffer-regexps": {
    "default": "((\"^ \\\\*load\\\\*\"))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Regular expressions determining the initial state for a buffer.\nEntries have the form (REGEXP . STATE), where REGEXP is a regular\nexpression matching the buffer's name and STATE is one of `normal',\n`insert', `visual', `replace', `operator', `motion', `emacs' and\n`nil'.  If STATE is `nil', Evil is disabled in the buffer.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-describe": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return description of BEG and END with PROPERTIES.\nIf no description is available, return the empty string.",
    "arglist": [
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-top-line-to-bottom": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the line right below the window,\nor line COUNT to the top of the window.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-current-replacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The actual replacement.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-symbol-1": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-symbol-1'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-without-restriction": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY with the top-most narrowing removed.\nThis works only if the previous narrowing has been generated by\n`evil-with-restriction'.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-visual-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the type of the Visual selection.\nIf SELECTION is specified, return the type of that instead.",
    "arglist": [
      "&optional",
      "selection"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-first-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the line number of the first line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-split-prev-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits window and goes to the COUNT-th prev buffer in the buffer list.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-max-length": {
    "default": 100,
    "local": null,
    "default-type": "integer",
    "var-docstring": "The maximum number of jumps to keep track of.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-stop-execute-in-emacs-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-word-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th next word.\nIf BIGWORD is non-nil, move by WORDS.",
    "arglist": [
      "&optional",
      "count",
      "bigword"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-start-record-changes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Starts the recording of a new set of buffer changes.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-line'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-ex-execute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute RESULT as an ex command in the appropriate buffer.",
    "arglist": [
      "result"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-send-localleader": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Put symbol localleader in `unread-command-events' to trigger any\n<localleader> bindings.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exchange-point-and-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Exchange point and mark without activating the region.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-command-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Start command window with search history and current minibuffer content.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-single-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY as a single undo step.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-commands": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-vsplit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the current window vertically, COUNT columns width,\nediting a certain FILE. The new window will be created to the\nright when `evil-vsplit-window-right' is non-nil. If COUNT and\n`evil-auto-balance-windows'are both non-nil then all children\nof the parent of the splitted window are rebalanced.",
    "arglist": [
      "&optional",
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the type of OBJECT, or DEFAULT if none.",
    "arglist": [
      "object",
      "&optional",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-subrange-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether RANGE1 is contained within RANGE2.",
    "arglist": [
      "range1",
      "range2"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-idx": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Access slot \"idx\" of `evil-jumps-struct' struct CL-X.",
    "arglist": [
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a STATE binding from KEY to DEF for KEYMAP.\nSTATE is one of `normal', `insert', `visual', `replace',\n`operator', `motion', `emacs', or a list of one or more of\nthese. Omitting a state by using `nil' corresponds to a standard\nEmacs binding using `define-key'. The remaining arguments are\nlike those of `define-key'. For example:\n\n    (evil-define-key 'normal foo-map \"a\" 'bar)\n\nThis creates a binding from `a' to `bar' in normal state, which\nis active whenever `foo-map' is active. Using nil for the state,\nthe following lead to identical bindings:\n\n    (evil-define-key nil foo-map \"a\" 'bar)\n    (define-key foo-map \"a\" 'bar)\n\nIt is possible to specify multiple states and/or bindings at\nonce:\n\n    (evil-define-key '(normal visual) foo-map\n      \"a\" 'bar\n      \"b\" 'foo)\n\nIf `foo-map' has not been initialized yet, this macro adds an\nentry to `after-load-functions', delaying execution as necessary.\n\nKEYMAP may also be a quoted symbol. If the symbol is `global', the\nglobal evil keymap corresponding to the state(s) is used, meaning\nthe following lead to identical bindings:\n\n    (evil-define-key 'normal 'global \"a\" 'bar)\n    (evil-global-set-key 'normal \"a\" 'bar)\n\nThe symbol `local' may also be used, which corresponds to using\n`evil-local-set-key'. If a quoted symbol is used that is not\n`global' or `local', it is assumed to be the name of a minor\nmode, in which case `evil-define-minor-mode-key' is used.",
    "arglist": [
      "state",
      "keymap",
      "key",
      "def",
      "&rest",
      "bindings"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-local-mode-major-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-refresh": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Refresh point, mark and Visual variables.\nRefreshes `evil-visual-beginning', `evil-visual-end',\n`evil-visual-mark', `evil-visual-point', `evil-visual-selection',\n`evil-visual-direction', `evil-visual-properties' and `evil-this-type'.",
    "arglist": [
      "&optional",
      "mark",
      "point",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-top-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to top-left window.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Motion state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] previous lowercase mark.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--restore-repeat-hooks": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "No insert-state repeat info is recorded after executing in normal state.\nRestore the disabled repeat hooks on insert-state exit.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-toggle-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set `evil-toggle-key' to KEY.\nKEY must be readable by `read-kbd-macro'.",
    "arglist": [
      "key"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-change": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change text from BEG to END with TYPE.\nSave in REGISTER or the kill-ring with YANK-HANDLER.\nDELETE-FUNC is a function for deleting text, default `evil-delete'.\nIf TYPE is `line', insertion starts on an empty line.\nIf TYPE is `block', the inserted text in inserted at each line\nof the block.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler",
      "delete-func"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-modes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--find-thing": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a cons of THING near point as a string and its position.\nTHING should be a symbol understood by `thing-at-point',\ne.g. 'symbol or 'word.  If FORWARD is nil, search backward,\notherwise forward.  Returns nil if nothing is found.",
    "arglist": [
      "forward",
      "thing"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initial-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the Evil state to use for MODE or its alias.\nReturns DEFAULT if no initial state is associated with MODE.\nThe initial state for a mode can be set with\n`evil-set-initial-state'.\n\nIf FOLLOW-PARENT is non-nil, also check parent modes of MODE and\nits alias. CHECKED-MODES is used internally and should not be set\ninitially.",
    "arglist": [
      "mode",
      "&optional",
      "default",
      "follow-parent",
      "checked-modes"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-recording-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns non-nil iff a recording is in progress.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-active-region": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Toggle active region.\nEnsure that Transient Mark mode is properly enabled.\nEnable with positive ARG, disable with negative ARG.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-delete": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Deletes the current window.\nIf `evil-auto-balance-windows' is non-nil then all children of\nthe deleted window's parent window are rebalanced.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-page-down": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT pages downwards.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-range-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return beginning of RANGE.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ensure-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY so that column after execution is correct.\nIf `evil-start-of-line' is nil, treat BODY as if it were a `next-line' command.\nThis mostly copies the approach of Emacs' `line-move-1', but is modified\nso it is more compatible with evil's notions of eol & tracking.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-narrow": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restrict the buffer to BEG and END.\nBEG or END may be nil, specifying a one-sided restriction including\n`point-min' or `point-max'. See also `evil-with-restriction.'",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-cjk-word-separating-categories": {
    "default": "((67 . 72) (67 . 75) (67 . 107) (67 . 65) (67 . 71) (72 . 67) (72 . 75) (72 . 107) (72 . 65) (72 . 71) (75 . 67) (75 . 72) (75 . 107) (75 . 65) (75 . 71) (107 . 67) (107 . 72) (107 . 75) (65 . 67) (65 . 72) (65 . 75) (71 . 67) (71 . 72) (71 . 75))",
    "local": null,
    "default-type": "cons",
    "var-docstring": "List of pair (cons) of categories to determine word boundary\nused in `evil-cjk-word-boundary-p'. See the documentation of\n`word-separating-categories'. Use `describe-categories' to see\nthe list of categories.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-macro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute keyboard macro MACRO, COUNT times.\nWhen called with a non-numerical prefix (such as \\[universal-argument]),\nCOUNT is infinite. MACRO is read from a register\nwhen called interactively.",
    "arglist": [
      "count",
      "macro"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-bindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Evil's bindings for insert & replace states.\nUsed in `evil-insert-state-map' and `evil-replace-state-map',\nexcluding <delete>, <escape>, and `evil-toggle-key'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-for-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the minor mode associated with KEYMAP.\nReturns DEFAULT if no mode is found.\nSee also `evil-keymap-for-mode'.",
    "arglist": [
      "keymap",
      "&optional",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-shell-argument-initialized": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "This variable is set to t if shell command completion has been initialized.\nSee `evil-ex-init-shell-argument-completion'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-record-position": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set `evil-repeat-pos' to POS or point.",
    "arglist": [
      "&optional",
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeats the last ex command.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--flyspell-overlay-at": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "pos",
      "forwardp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-pending-custom-initialize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "A list of pending initializations for custom variables.\nEach element is a triple (FUNC VAR VALUE). When Evil is\ncompletely loaded then the functions (funcall FUNC VAR VALUE) is\ncalled for each element. FUNC should be a function suitable for\nthe :initialize property of `defcustom'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-motion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read a MOTION, motion COUNT and motion TYPE from the keyboard.\nThe type may be overridden with MODIFIER, which may be a type\nor a Visual selection as defined by `evil-define-visual-selection'.\nReturn a list (MOTION COUNT [TYPE]).",
    "arglist": [
      "&optional",
      "motion",
      "count",
      "type",
      "modifier"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-argument-handler-completer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "arg-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-prev-flyspell-error": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the COUNT'th spelling mistake preceding point.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-tag": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Mode line tag for Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Goes to the next occurrence.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-overriding-keymap-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether MAP is an overriding keymap for STATE.\nIf STATE is nil, it means any state.",
    "arglist": [
      "map",
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-pre-jump-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run just before jumping to a location in the jump list.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-block": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "*Blockwise selection.",
    "fn-docstring": "Blockwise selection.",
    "arglist": [
      "&optional",
      "mark",
      "point",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-alternate-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the last buffer WINDOW has displayed other than the\ncurrent one (equivalent to Vim's alternate buffer).\n\nReturns the first item in `window-prev-buffers' that isn't\n`window-buffer' of WINDOW.",
    "arglist": [
      "&optional",
      "window"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change to STATE and execute BODY without refreshing the display.\nRestore the previous state afterwards.",
    "arglist": [
      "state",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-write-echo-area": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If set to t inside `evil-save-echo-area', then the echo area\nis not restored.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command-window-execute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "config",
      "result"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-left": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT half-screenwidths to the left.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transform-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Apply TRANSFORM to RANGE according to its type.\nReturn a new range if COPY is non-nil.",
    "arglist": [
      "transform",
      "range",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the last editing command with count replaced by COUNT.\nIf SAVE-POINT is non-nil, do not move point.",
    "arglist": [
      "count",
      "&optional",
      "save-point"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-repeat-substitute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat last substitute command.\nThis is the same as :s//~/",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-vars": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-keypress-parser": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read from keyboard or INPUT and build a command description.\nReturns (CMD COUNT), where COUNT is the numeric prefix argument.\nBoth COUNT and CMD may be nil.",
    "arglist": [
      "&optional",
      "input"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Visual state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-global": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex global command.\n[BEG,END]global[!]/PATTERN/COMMAND",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "pattern",
      "command",
      "invert"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-normal": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex normal command.\nExecute the argument as normal command on each line in the\nrange. The given argument is passed straight to\n`execute-kbd-macro'.  The default is the current line.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "commands"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-properties": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Specifications made by `evil-define-state'.\nEntries have the form (STATE . PLIST), where PLIST is a property\nlist specifying various aspects of the state. To access a property,\nuse `evil-state-property'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ret-and-indent": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines down.\nIf point is on a widget or a button, click on it.\nIn Insert state, insert a newline and indent.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-section-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th next section.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-mark": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set buffer's mark to POS.\nIf POS is nil, delete the mark.",
    "arglist": [
      "pos"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-redo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Undo COUNT changes in buffer using `evil-redo-function'.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-echo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Display an unlogged message in the echo area.\nThat is, the message is not logged in the *Messages* buffer.\n(To log the message, just use `message'.)",
    "arglist": [
      "string",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-beyond-eol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether the cursor can move past the end of the line.\nIf non-nil, the cursor is allowed to move one character past the\nend of the line, as in Emacs.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hook run after entering or leaving `evil-mode'.\nNo problems result if this variable is not bound.\n`add-hook' automatically binds it.  (This is true for all hook variables.)",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-down": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window and the cursor COUNT lines downwards.\nIf COUNT is not specified the function scrolls down\n`evil-scroll-count', which is the last used count.\nIf the scroll count is zero the command scrolls half the screen.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-bounds-of-not-thing-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns the bounds of a complement of THING at point.\nIf there is a THING at point nil is returned.  Otherwise if WHICH\nis nil or 0 a cons cell (BEG . END) is returned. If WHICH is\nnegative the beginning is returned. If WHICH is positive the END\nis returned.",
    "arglist": [
      "thing",
      "&optional",
      "which"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-overriding-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a keymap alist of overriding keymaps for STATE.",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-digraph-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read two keys from keyboard forming a digraph.\nThis function creates an overlay at (point), hiding the next\nHIDE-CHARS characters.  HIDE-CHARS defaults to 1.",
    "arglist": [
      "&optional",
      "hide-chars"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-completion-table-concat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "table1",
      "table2",
      "string",
      "pred",
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-find-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeat the last find COUNT times.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change the cursor's apperance according to SPECS.\nSPECS may be a cursor type as per `cursor-type', a color\nstring as passed to `set-cursor-color', a zero-argument\nfunction for changing the cursor, or a list of the above.",
    "arglist": [
      "specs"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-undo-list-pointer": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Everything up to this mark is united in the undo-list.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-angle": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner angle bracket.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-sentence-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the next COUNT-th beginning of a sentence or end of a paragraph.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Goes to the `count'-th next buffer in the buffer list.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-from-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Paste from REGISTER.",
    "arglist": [
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-make-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a new search pattern.\nREGEXP is the regular expression to be searched for. CASE should\nbe either 'sensitive, 'insensitive for case-sensitive and\ncase-insensitive search, respectively, or anything else.  In the\nlatter case the pattern is smart-case, i.e. it is automatically\nsensitive of the pattern contains one upper case letter,\notherwise it is insensitive.  The input REGEXP is considered a\nVim-style regular expression if `evil-ex-search-vim-style-regexp'\nis non-nil, in which case it is transformed to an Emacs style\nregular expression (i.e. certain backslash-codes are\ntransformed. Otherwise REGEXP must be an Emacs style regular\nexpression and is not transformed.",
    "arglist": [
      "regexp",
      "case",
      "whole-line"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-block-contract": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform contract transformation on block from BEG to END with PROPERTIES.\n\nLike `inclusive', but for rectangles:\nthe last column is included.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-previous-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The previously executed Ex command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-match-beg": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The beginning position of the last match.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normalize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Normalize BEG and END as TYPE with PROPERTIES.\nReturns a list (BEG END TYPE PROPERTIES ...), where the tail\nmay contain a property list.",
    "arglist": [
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-indent": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Indent text.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-vcount": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The information about the number of following lines the\ninsertion should be repeated. This is list (LINE COLUMN COUNT)\nwhere LINE is the line-number where the original insertion\nstarted and COLUMN is either a number or function determining the\ncolumn where the repeated insertions should take place. COUNT is\nnumber of repeats (including the original insertion).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-track-last-insertion": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Track the last insertion range and its text.\nThe insertion range is stored as a pair of buffer positions in\n`evil-current-insertion'. If a subsequent change is compatible,\nthen the current range is modified, otherwise it is replaced by a\nnew range. Compatible changes are changes that do not create a\ndisjoin range.",
    "arglist": [
      "beg",
      "end",
      "len"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-flyspell-error": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to the COUNT'th spelling mistake after point.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-char-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the previous COUNT'th occurrence of CHAR.",
    "arglist": [
      "&optional",
      "count",
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode-map-alist": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Association list of keymaps to use for Evil modes.\nElements have the form (MODE . KEYMAP), with the first keymaps\nhaving higher priority.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete text from BEG to END with TYPE.\nSave in REGISTER or in the kill-ring with YANK-HANDLER.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-exclusive-string": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return size of exclusive from BEG to END with PROPERTIES.\n\nReturn the positions unchanged, with some exceptions.\nIf the end position is at the beginning of a line, then:\n\n* If the beginning position is at or before the first non-blank\n  character on the line, return `line' (expanded).\n\n* Otherwise, move the end position to the end of the previous\n  line and return `inclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--execute-normal-eol-pos": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Vim has special behaviour for executing in normal state at eol.\nThis var stores the eol position, so it can be restored when necessary.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Operator-Pending state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-char-in-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char-in-line'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to Insert state just before point.\nThe insertion will be repeated COUNT times and repeated once for\nthe next VCOUNT - 1 lines starting at the same column.\nIf SKIP-EMPTY-LINES is non-nil, the insertion will not be performed\non lines on which the insertion point would be after the end of the\nlines.  This is the default behaviour for Visual-state insertion.",
    "arglist": [
      "count",
      "&optional",
      "vcount",
      "skip-empty-lines"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-alist": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Association list of characters overwritten in Replace state.\nThe format is (POS . CHAR).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-update-x-selection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the X selection with the current visual region of BUFFER.",
    "arglist": [
      "&optional",
      "buffer"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-view-list": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Opens new list view buffer.\n\nPROPERTIES is a property-list which supports the following properties:\n\n:name           (required)   The name of the buffer.\n:mode-name      (required)   The name for the mode line.\n:format         (required)   The value for `tabulated-list-format'.\n:entries        (required)   The value for `tabulated-list-entries'.\n:select-action  (optional)   A function for row selection.\n                             It takes in a single parameter, which is the selected row's\n                             vector value that is passed into `:entries'.\n",
    "arglist": [
      "&rest",
      "properties"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-ex-search-match-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The end position of the last match.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-last-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-d-scroll": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-d' scrolls down (like Vim).",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-move-very-top": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Closes the current window, splits the upper-left one horizontally\nand redisplays the current buffer there.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-indentation": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete all indentation on current line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "*Characterwise selection.",
    "fn-docstring": "Characterwise selection.",
    "arglist": [
      "&optional",
      "mark",
      "point",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-selection-function": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a selection function for TYPE.\nDefault to `evil-visual-make-region'.",
    "arglist": [
      "selection"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-change-to-previous-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change the state of BUFFER to its previous state.",
    "arglist": [
      "&optional",
      "buffer",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse-events-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Returns non-nil iff KEYS contains a mouse event.",
    "arglist": [
      "keys"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-input-method": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Input method used in Insert state and Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-state-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether the current state is Operator-Pending state.\n(That is, whether `evil-state' is `operator'.)",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-register": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Current register.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-file-at-point-with-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Opens the file at point and goes to line-number.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-in-emacs-state-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The buffer of the latest `evil-execute-in-emacs-state'.\nWhen this command is being executed the current buffer is stored\nin this variable. This is necessary in case the Emacs-command to\nbe called changes the current buffer.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-word-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th previous word.\nIf BIGWORD is non-nil, move by WORDS.",
    "arglist": [
      "&optional",
      "count",
      "bigword"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-unbounded-word-forward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search forward for symbol under point.\nThe search is unbounded, i.e., the pattern is not wrapped in\n\\<...\\>.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-interactive": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If t search is interactive.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-state-local-map": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Buffer-local keymap for Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-back-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner back-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-nreplaced": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jump-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to older position in jump list.\nTo go the other way, press \\<evil-motion-state-map>\\[evil-jump-forward].",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-=-register-input": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Most recent input from the `=' register. A string.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-custom-motions": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Sets the list of motion commands.",
    "arglist": [
      "var",
      "values"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-minor-mode-keymap-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether MAP is a minor-mode keymap.",
    "arglist": [
      "map"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-normal-post-command": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Reset command loop variables in Normal state.\nAlso prevent point from reaching the end of the line.\nIf the region is activated, enter Visual state.",
    "arglist": [
      "&optional",
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-change-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Change to end of line, or change whole line if characterwise visual mode.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inclusive-contract": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform contract transformation on inclusive from BEG to END with PROPERTIES.\n\nInclude the character under point.\nIf the end position is at the beginning of a line or the end of a\nline and `evil-want-visual-char-semi-exclusive', then:\n\n* If in visual state return `exclusive' (expanded).",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-last-visual-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a linewise range of the last visual selection.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Major mode derived from `tabulated-list-mode' by `define-derived-mode'.\nIt inherits all of the parent's attributes, but has its own keymap,\nabbrev table and syntax table:\n\n  `evil-list-view-mode-map', `evil-list-view-mode-abbrev-table' and\n`evil-list-view-mode-syntax-table'\n\nwhich more-or-less shadow tabulated-list-mode's corresponding tables.\n\nIn addition to any hooks its parent mode might have run, this mode\nruns the hook `evil-list-view-mode-hook', as the final or penultimate\nstep during initialization.\n\n\\{evil-list-view-mode-map}",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-char-to": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move before the next COUNT'th occurrence of CHAR.",
    "arglist": [
      "&optional",
      "count",
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-initial-input": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Additional initial content of the ex command line.\nThis content of this variable is appended to the ex command line\nif ex is started interactively.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-select-action": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-change-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be repeatable by buffer changes rather than\nkeystrokes.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-definition": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to definition or first occurrence of symbol under point.\nSee also `evil-goto-definition-functions'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-unbounded-word-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search backward for symbol under point.\nThe search is unbounded, i.e., the pattern is not wrapped in\n\\<...\\>.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-minor-mode-keymaps-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of Evil states to minor-mode keymap alists.\nEntries have the form (STATE . MODE-MAP-ALIST), where\nMODE-MAP-ALIST is an alist taking the form of\n`minor-mode-map-alist'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-middle-of-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the middle of the current visual line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-contract": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform contract transformation on line from BEG to END with PROPERTIES.\n\nInclude whole lines.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move backward to beginning of THING.\nThe motion is repeated COUNT times. This is the same as calling\n`evil-backward-beginning' with -COUNT.",
    "arglist": [
      "thing",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-add-hjkl-bindings": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add \"h\", \"j\", \"k\", \"l\" bindings to KEYMAP in STATE.\nAdd additional BINDINGS if specified.",
    "arglist": [
      "keymap",
      "&optional",
      "state",
      "&rest",
      "bindings"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-command-window-execute-fn": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The command to execute when exiting the command line window.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-char-marker-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-WORD": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a WORD.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state-modes": {
    "default": "(comint-mode erc-mode eshell-mode geiser-repl-mode gud-mode inferior-apl-mode inferior-caml-mode inferior-emacs-lisp-mode inferior-j-mode inferior-python-mode inferior-scheme-mode inferior-sml-mode internal-ange-ftp-mode prolog-inferior-mode reb-mode shell-mode slime-repl-mode term-mode wdired-mode)",
    "local": null,
    "default-type": "cons",
    "var-docstring": "Modes that should come up in Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-set-min": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the minimal buffer position of the highlight HL to MIN.",
    "arglist": [
      "hl",
      "min"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move COUNT - 1 lines down.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-change": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the regular expression of highlight NAME to PATTERN.",
    "arglist": [
      "name",
      "pattern"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-syntax": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point to the end or beginning of a sequence of characters in\nSYNTAX.\nStop on reaching a character not in SYNTAX.",
    "arglist": [
      "syntax",
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-WORD": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-describe-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return description of RANGE.\nIf no description is available, return the empty string.",
    "arglist": [
      "range"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-whole-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete whole line.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-overlay": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The overlay for the current search result.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-track-eol": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether \\[evil-end-of-line] \"sticks\" the cursor to the end of the line.\nIf non-nil, vertical motions after \\[evil-end-of-line] maintain the cursor at the\nend of the line, even if the target line is longer.  This is analogous\nto `track-eol', but respects Evil's interpretation of end-of-line.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-column": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to column COUNT on the current line.\nColumns are counted from zero.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-pattern-update-replacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Update the replacement display.",
    "arglist": [
      "_hl",
      "overlay"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command-force-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether COMMAND accepts the bang argument.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-file-or-shell-command-completion-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-esc-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Original ESC prefix map in `input-decode-map'.\nUsed by `evil-esc-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-position": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the position of LINE.\nIf COLUMN is specified, return its position on the line.\nA negative number means the end of the line.",
    "arglist": [
      "line",
      "&optional",
      "column"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-close-paren": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] next unmatched ')'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-start-session": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Initialize Ex for interactive search.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-abort": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Abort current repeation.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-changes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Accumulated buffer changes for changed-based commands.",
    "fn-docstring": "Repeation recording function for commands that are repeated by buffer changes.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-regex": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-previous-point": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The position of point before Visual state, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-paste-before": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Pastes the latest yanked text before the cursor position.\nThe return value is the yanked text.",
    "arglist": [
      "count",
      "&optional",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-markers-alist": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Association list for markers.\nEntries have the form (CHAR . DATA), where CHAR is the marker's\nname and DATA is either a marker object as returned by `make-marker',\na variable, a movement function, or a cons cell (STRING NUMBER),\nwhere STRING is a file path and NUMBER is a buffer position.\nThe global value of this variable holds markers available from\nevery buffer, while the buffer-local value holds markers available\nonly in the current buffer.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return property PROP for KEY in ALIST.\nALIST is an association list with entries of the form\n(KEY . PLIST), where PLIST is a property list.\nIf PROP is nil, return all properties for KEY.\nIf KEY is t, return an association list of keys\nand their PROP values.",
    "arglist": [
      "alist",
      "key",
      "&optional",
      "prop"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-beginning-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the current line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute-flags": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The last substitute flags.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-execute-in-normal-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute the next command in Normal state.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-savehist-load": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for window-related commands.",
    "fn-docstring": "Prefix command (definition is a keymap associating keystrokes with commands).",
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "ffap-other-window": "C-f",
      "evil-window-set-height": "C-_",
      "evil-window-prev": "W",
      "evil-window-next": "C-w",
      "evil-window-vsplit": "C-v",
      "evil-window-top-left": "C-t",
      "evil-window-split": "C-s",
      "evil-window-split": "C-s",
      "evil-window-rotate-upwards": "R",
      "evil-window-rotate-downwards": "C-r",
      "evil-window-mru": "C-p",
      "delete-other-windows": "C-o",
      "evil-window-new": "C-n",
      "evil-window-move-far-right": "L",
      "evil-window-move-very-top": "K",
      "evil-window-move-very-bottom": "J",
      "evil-window-move-far-left": "H",
      "evil-window-delete": "C-c",
      "evil-window-bottom-right": "C-b",
      "evil-window-set-width": "|",
      "balance-windows": "=",
      "evil-window-increase-width": ">",
      "evil-window-decrease-width": "<",
      "evil-window-set-height": "C-_",
      "evil-window-decrease-height": "-",
      "evil-window-increase-height": "+",
      "evil-window-prev": "W",
      "evil-window-next": "C-w",
      "evil-window-vsplit": "C-v",
      "evil-window-top-left": "C-t",
      "evil-window-split": "C-s",
      "evil-window-split": "C-s",
      "evil-window-rotate-upwards": "R",
      "evil-window-rotate-downwards": "C-r",
      "evil-quit": "q",
      "evil-window-mru": "C-p",
      "delete-other-windows": "C-o",
      "evil-window-new": "C-n",
      "evil-window-move-far-right": "L",
      "evil-window-right": "l",
      "evil-window-move-very-top": "K",
      "evil-window-up": "k",
      "evil-window-move-very-bottom": "J",
      "evil-window-down": "j",
      "evil-window-move-far-left": "H",
      "evil-window-left": "h",
      "evil-window-delete": "C-c",
      "evil-window-bottom-right": "C-b"
    }
  },
  "evil-transform-vim-style-regexp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Transforms vim-style backslash codes to Emacs regexp.\nThis includes the backslash codes \\d, \\D, \\s, \\S, \\x, \\X,\n\\o, \\O, \\a, \\A, \\l, \\L, \\u, \\U and \\w, \\W. The new\ncodes \\y and \\Y can be used instead of the Emacs code \\s and\n\\S which have a different meaning in Vim-style.",
    "arglist": [
      "regexp"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-split-search-pattern": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Split PATTERN in regexp, offset and next-pattern parts.\nReturns a triple (regexp  offset next-search).",
    "arglist": [
      "pattern",
      "direction"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-highlight-all": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "If t and interactive search is enabled, all matches are\nhighlighted.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transient-vars": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "List of variables pertaining to Transient Mark mode.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-key-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap active during `evil-read-key'.\nThis keymap can be used to bind some commands during the\nexecution of `evil-read-key' which is usually used to read a\ncharacter argument for some commands, e.g. `evil-replace'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": {
      "evil-read-digraph-char": "C-k",
      "evil-read-quoted-char": "C-v",
      "evil-read-quoted-char": "C-v",
      "keyboard-quit": "C-g",
      "keyboard-quit": "C-g",
      "keyboard-quit": "C-g"
    }
  },
  "evil-first-non-blank-of-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the first non blank character\nof the current screen line.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-line-up": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT lines upwards.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-lines": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if the current insertion command is a line-insertion\ncommand o or O.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jump-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "`pre-command-hook' for evil-jumps.\nSet jump point if COMMAND has a non-nil `:jump' property. Otherwise,\nsave the current position in case the command being executed will\nchange the current buffer.",
    "arglist": [
      "&optional",
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-command-keys": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Version of `this-command-keys' with finer control over prefix args.",
    "arglist": [
      "&optional",
      "post-cmd"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-non-blank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the last non-blank character of the current line.\nIf COUNT is given, move COUNT - 1 lines downward first.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-type": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Current motion type.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Keymap for Ex.\nKey sequences bound in this map are immediately executed.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-bracket": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a square bracket.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-was-yanked-without-register": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether text being saved to the numbered-register ring was\nnot deleted and not yanked to a specific register.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-section-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the beginning of the COUNT-th previous section.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-has-command-property-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Whether COMMAND has Evil PROPERTY.\nSee also `evil-has-command-properties-p'.",
    "arglist": [
      "command",
      "property"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-make-intercept-map": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Give KEYMAP precedence over all Evil keymaps in STATE.\nIf STATE is nil, give it precedence over all states. If AUX is non-nil, make the\nauxiliary keymap corresponding to KEYMAP in STATE an intercept keymap instead of\nKEYMAP itself. See also `evil-make-overriding-map'.",
    "arglist": [
      "keymap",
      "&optional",
      "state",
      "aux"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-block-rotate": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Perform rotate transformation on block from BEG to END with PROPERTIES.\n\nRotate block according to :corner property.\n:corner can be one of `upper-left',``upper-right', `lower-left'\nand `lower-right'.\n\nLike `inclusive', but for rectangles:\nthe last column is included.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-word-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th previous word.\nIf BIGWORD is non-nil, move by WORDS.",
    "arglist": [
      "&optional",
      "count",
      "bigword"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-parse-global": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as a global argument.",
    "arglist": [
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-initialize": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Evil in the current buffer, if appropriate.\nTo enable Evil globally, do (evil-mode 1).",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-first-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to line COUNT. By default the first line.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-hl-face": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the face of the highlight HL.",
    "arglist": [
      "hl"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-bang": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The \"!\" argument of the current Ex command.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-read-key": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Read a key from the keyboard.\nTranslates it according to the input method.",
    "arglist": [
      "&optional",
      "prompt"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-yank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex yank command.\n[BEG,END]yank [REGISTER] [COUNT]",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "count",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-symbol": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner symbol.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-expand-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Expand RANGE according to its type.\nReturn a new range if COPY is non-nil.",
    "arglist": [
      "range",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-line-down": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT lines downwards.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-cmd": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The current Ex command string.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-beginning-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the beginning of the line as displayed.\nLike `move-beginning-of-line', but retains the goal column.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-abort": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Abort interactive search, disabling lazy highlighting.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-mru": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the previous (last accessed) buffer in another window.\nMore precisely, it selects the most recently used buffer that is\nshown in some other window, preferably of the current frame, and\nis different from the current one.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-decrease-height": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Decrease current window height by COUNT.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-make-selection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Create a Visual selection with point at POINT and mark at MARK.\nThe boundaries of the selection are inferred from these\nand the current TYPE. To specify the boundaries and infer\nmark and point, use `evil-visual-select' instead.",
    "arglist": [
      "mark",
      "point",
      "&optional",
      "type",
      "message"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-a-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select a word.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-new": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Splits the current window horizontally\nand opens a new buffer or edits a certain FILE.",
    "arglist": [
      "count",
      "file"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save the current cursor; execute BODY; restore the cursor.",
    "arglist": [
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-repeat-start-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Record a new repeat when exiting Normal state.\nDoes not record in Emacs state or if the current command\nhas :repeat nil.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-restriction-stack": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "List of previous restrictions.\nUsing `evil-with-restriction' stores the previous values of\n`point-min' and `point-max' as a pair in this list.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define type TYPE.\nDOC is a general description and shows up in all docstrings.\n\nOptional keyword arguments:\n- `:expand' - expansion function.  This function should accept two\n  positions in the current buffer, BEG and END,and return a pair of\n  expanded buffer positions.\n- `:contract' - the opposite of `:expand'.  Optional.\n- `:one-to-one' - non-nil if expansion is one-to-one.  This means that\n  `:expand' followed by `:contract' always return the original range.\n- `:normalize' - normalization function.  This function should accept\n  two unexpanded positions and adjust them before expansion.  May be\n  used to deal with buffer boundaries.\n- `:string' - description function.  Takes two buffer positions and\n  returns a human-readable string.  For example \"2 lines\"\n\nIf further keywords and functions are specified, they are assumed to\nbe transformations on buffer positions, like `:expand' and `:contract'.\n\n(fn TYPE DOC [[KEY FUNC]...])",
    "arglist": [
      "type",
      "doc",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-expand": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Expand BEG and END as TYPE with PROPERTIES.\nReturns a list (BEG END TYPE PROPERTIES ...), where the tail\nmay contain a property list.",
    "arglist": [
      "beg",
      "end",
      "type",
      "&rest",
      "properties"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-incrementally": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search incrementally for user-entered text.",
    "arglist": [
      "forward",
      "regexp-p"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-setup-and-update": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Initialize Ex minibuffer with `evil-ex-setup', then call `evil-ex-update'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-defun": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-section-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the end of the COUNT-th previous section.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-yank": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Saves the characters in motion into the kill-ring.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register",
      "yank-handler"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--insert-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Switch to insert state at the beginning of the current line.\nIf NON-BLANK-P is non-nil, point is placed at the first non-blank character\non the current line.  If NON-BLANK-P is nil, point is placed at column 0,\nor the beginning of visual line.  The insertion will be repeated COUNT times.\nIf VCOUNT is non nil it should be number > 0. The insertion will be repeated\nin the next VCOUNT - 1 lines below the current one.",
    "arglist": [
      "count",
      "vcount",
      "non-blank-p"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-put": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "beg",
      "end",
      "ex-arg",
      "&optional",
      "force"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-word-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search backward for symbol under point.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-next-close-brace": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to [count] next unmatched '}'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move cursor to the left by COUNT characters.\nMovement is restricted to the current line unless CROSSLINES is non-nil.\nIf NOERROR is non-nil, don't signal an error upon reaching the beginning\nof the line or the buffer; just return nil.",
    "arglist": [
      "&optional",
      "count",
      "crosslines",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inner-single-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Select inner single-quoted expression.",
    "arglist": [
      "&optional",
      "count",
      "beg",
      "end",
      "type"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-prev-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-window-next": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor to the next window in the cyclic order.\nWith COUNT go to the count-th window in the order starting from\ntop-left.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-inhibit-operator": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Inhibit current operator.\nIf an operator calls a motion and the motion sets this variable\nto t, the operator code is not executed.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-C-w-delete": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether `C-w' deletes a word in Insert state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ac-prefix-len": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-end": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The end of the Visual selection, a marker.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-word": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for word near point.\nIf FORWARD is nil, search backward, otherwise forward. If SYMBOL\nis non-nil then the functions searches for the symbol at point,\notherwise for the word at point.",
    "arglist": [
      "forward",
      "unbounded",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Evil mode is enabled.\nSee the `evil-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `evil-mode'.",
    "fn-docstring": "Toggle Evil-Local mode in all buffers.\nWith prefix ARG, enable Evil mode if ARG is positive; otherwise,\ndisable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nEvil-Local mode is enabled in all buffers where `evil-initialize'\nwould do it.\n\nSee `evil-local-mode' for more information on Evil-Local mode.\n\nThis function has :around advice: ‘ad-Advice-evil-mode’.\n\n(fn &optional ARG)",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-p--cmacro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "compiler-macro for inlining `evil-jumps-struct-p'.",
    "arglist": [
      "_cl-whole-arg",
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-local-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Evil-Local mode is enabled.\nUse the command `evil-local-mode' to change this variable.",
    "fn-docstring": "Minor mode for setting up Evil in a single buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Evil-Local mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `evil-local-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-regex-without-case": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the regular expression without all occurrences of \\c and \\C.",
    "arglist": [
      "re"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-and-quit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save all buffers and exit Emacs.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-with-restriction": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Execute BODY with the buffer narrowed to BEG and END.\nBEG or END may be nil as passed to `evil-narrow'; this creates\na one-sided restriction.",
    "arglist": [
      "beg",
      "end",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-normal-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Normal state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-case": {
    "default": "smart",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The case behaviour of the search command.\nSmart case means that the pattern is case sensitive if and only\nif it contains an upper case letter, otherwise it is case\ninsensitive.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-echo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Display a message after the current Ex command.",
    "arglist": [
      "string",
      "&rest",
      "args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-adjust-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move point one character back if at the end of a non-empty line.\nThis behavior is controled by `evil-move-beyond-eol'.",
    "arglist": [
      "&optional",
      "_"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-transform-magic": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Transforms STR with magic characters.\nMAGIC is a regexp that matches all potential magic\ncharacters. Each occurence of CHAR as magic character within str\nis replaced by the result of calling the associated TRANSFORM\nfunction. TRANSFORM is a function taking two arguments, the\ncharacter to be transformed and the rest of string after the\ncharacter. The function should return a triple (REPLACEMENT REST\n. STOP) where REPLACEMENT is the replacement and REST is the rest\nof the string that has not been transformed. If STOP is non-nil\nthen the substitution stops immediately.  The replacement starts\nat position START, everything before that position is returned\nliterally.  The result is a pair (RESULT . REST). RESULT is a\nlist containing the transformed parts in order. If two\nsubsequents parts are both strings, they are concatenated. REST\nis the untransformed rest string (usually \"\" but may be more if\nTRANSFORM stopped the substitution). Which characters are\nconsidered as magic characters (i.e. the transformation happens\nif the character is NOT preceeded by a backslash) is determined\nby `evil-magic'. The special tokens \\v, \\V, \\m and \\M have\nalways a special meaning (like in Vim) and should not be\ncontained in TRANSFORMS, otherwise their meaning is overwritten.\n\nThe parameter QUOTE is a quoting function applied to literal\ntransformations, usually `regexp-quote' or `replace-quote'.",
    "arglist": [
      "str",
      "magic",
      "quote",
      "transform",
      "&optional",
      "_start"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-indent-convert-tabs": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-normal-state-map>\nIf non-nil, the \\[evil-indent] operator converts between leading tabs and spaces.\nWhether tabs are converted to spaces or vice versa depends on the\nvalue of `indent-tabs-mode'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for STRING and highlight matches.\nIf FORWARD is nil, search backward, otherwise forward.\nIf REGEXP-P is non-nil, STRING is taken to be a regular expression.\nSTART is the position to search from; if unspecified, it is\none more than the current position.",
    "arglist": [
      "string",
      "forward",
      "&optional",
      "regexp-p",
      "start"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-digraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Insert COUNT digraphs.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-want-fine-undo": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether actions are undone in several steps.\nThere are two possible choices: nil (\"no\") means that all\nchanges made during insert state, including a possible delete\nafter a change operation, are collected in a single undo step.\nNon-nil (\"yes\") means that undo steps are determined according\nto Emacs heuristics, and no attempt is made to aggregate changes.\n\nFor backward compatibility purposes, the value `fine' is\ninterpreted as `nil'.  This option was removed because it did not\nwork consistently.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-ex": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open a command line window for editing and executing ex commands.\nIf CURRENT-COMMAND is present, it will be inserted under the\ncursor as the current command to be edited. If EXECUTE-FN is given,\nit will be used as the function to execute instead of\n`evil-command-window-ex-execute', the default.",
    "arglist": [
      "&optional",
      "current-command",
      "execute-fn"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-auxiliary-keymap": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the auxiliary keymap for MAP in STATE to AUX.\nIf AUX is nil, create a new auxiliary keymap.",
    "arglist": [
      "map",
      "state",
      "&optional",
      "aux"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Open a command line window for HIST with CMD-KEY and EXECUTE-FN.\nHIST should be a list of commands.  CMD-KEY should be the string of\nthe key whose history is being shown (one of \":\", \"/\", or\n\"?\").  EXECUTE-FN should be a function of one argument to\nexecute on the result that the user selects.",
    "arglist": [
      "hist",
      "cmd-key",
      "execute-fn"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-idx--cmacro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "compiler-macro for inlining `evil-jumps-struct-idx'.",
    "arglist": [
      "_cl-whole-arg",
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-minor-mode": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Non-nil if Emacs state is enabled.\nUse the command `evil-emacs-state' to change this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-sentence-begin": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the previous COUNT-th beginning of a sentence or paragraph.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-start-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Analogue of vim's `startofline'.\nIf nil, preserve column when making relevant movements of the cursor.\nOtherwise, move the cursor to the start of the line.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jump-handle-buffer-crossing": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-function": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a search function.\nIf FORWARD is nil, search backward, otherwise forward.\nIf REGEXP-P is non-nil, the input is a regular expression.\nIf WRAP is non-nil, the search wraps around the top or bottom\nof the buffer.\nIf PREDICATE is non-nil, it must be a function accepting two\narguments: the bounds of a match, returning non-nil if that match is\nacceptable.",
    "arglist": [
      "&optional",
      "forward",
      "regexp-p",
      "wrap",
      "predicate"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search forward or backward COUNT times for the current ex search pattern.\nThe search pattern is determined by `evil-ex-search-pattern' and\nthe direcion is determined by `evil-ex-search-direction'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ace-jump-char-to-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Jump visually to the char in front of a char using ace-jump.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-window-configuration-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": [
      "&rest",
      "_args"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state-entry-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when entering Emacs state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-jumps-struct-previous-pos--cmacro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "compiler-macro for inlining `evil-jumps-struct-previous-pos'.",
    "arglist": [
      "_cl-whole-arg",
      "cl-x"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-match": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Find COUNTth next match in DIRECTION.",
    "arglist": [
      "direction",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-declare-insert-at-point-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Declare COMMAND to be repeatable by buffer changes.",
    "arglist": [
      "command"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-substitute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "The Ex substitute command.\n[BEG,END]substitute/PATTERN/REPLACEMENT/FLAGS",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "pattern",
      "replacement",
      "flags"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Replace text from BEG to END with CHAR.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "char"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-exit-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hooks to run when exiting Replace state.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-show-files": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Shows the file-list.\nThe same as `buffer-menu', but shows only buffers visiting\nfiles.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-range-type": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set RANGE's type to TYPE.\nIf COPY is non-nil, return a copy of RANGE.",
    "arglist": [
      "range",
      "type",
      "&optional",
      "copy"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-last-repeat": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Information about the latest repeat command.\nThis is a list of three elements (POINT COUNT UNDO-POINTER),\nwhere POINT is the position of point before the latest repeat,\nCOUNT the count-argument of the latest repeat command and\nUNDO-POINTER the head of the undo-list before the last command\nhas been repeated.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-get-command-property": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return the value of Evil PROPERTY of COMMAND.\nIf the command does not have the property, return DEFAULT.\nSee also `evil-get-command-properties'.",
    "arglist": [
      "command",
      "property",
      "&optional",
      "default"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-save-transient-mark-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Save Transient Mark mode and make it buffer-local.\nAny changes to Transient Mark mode are now local to the current\nbuffer, until `evil-restore-transient-mark-mode' is called.\n\nVariables pertaining to Transient Mark mode are listed in\n`evil-transient-vars', and their values are stored in\n`evil-transient-vals'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-deinit-esc": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore `input-decode-map' in terminal.",
    "arglist": [
      "frame"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-error": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to error number COUNT.\n\nIf no COUNT supplied, move to the current error.\n\nActs like `first-error' other than when given no counts, goes\nto the current error instead of the first, like in Vim's :cc\ncommand.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-end-of-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the end of the line as displayed.\nLike `move-end-of-line', but retains the goal column.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-wrap": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether search with \\[evil-search-forward] and \\[evil-search-backward] wraps around the buffer.\nIf this is non-nil, search stops at the buffer boundaries.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--add-to-alist": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Add the assocation of KEY and VAL to the value of LIST-VAR.\nIf the list already contains an entry for KEY, update that entry;\notherwise add at the end of the list.\n\n(fn LIST-VAR KEY VAL &rest ELEMENTS)",
    "arglist": [
      "list-var",
      "&rest",
      "elements"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-cleanup-insert-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Called when Insert state is about to be exited.\nHandles the repeat-count of the insertion command.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--mode-p": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Determines whether any symbol in MODES represents the current\nbuffer's major mode or any of its minors.",
    "arglist": [
      "modes"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-full-range": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a range encompassing the whole buffer.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-direction": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Whether point follows mark in Visual state.\nNegative if point precedes mark, otherwise positive.\nSee also the function `evil-visual-direction'.",
    "fn-docstring": "Return direction of Visual selection.\nThe direction is -1 if point precedes mark and 1 otherwise.\nSee also the variable `evil-visual-direction', which holds\nthe direction of the last selection.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-search-module": {
    "default": "isearch",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The search module to be used.  May be either `isearch', for\nEmacs' isearch module, or `evil-search', for Evil's own\ninteractive search module.  N.b. changing this will not affect keybindings.\nTo swap out relevant keybindings, see `evil-select-search-module' function.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-mode-hook": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Hook run after entering Evil-cmd mode.\nNo problems result if this variable is not bound.\n`add-hook' automatically binds it.  (This is true for all hook variables.)",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil--jumps-debug": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-get-optional-register-and-count": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as an ex arg with both optional REGISTER and COUNT.\nReturns a list (REGISTER COUNT).",
    "arglist": [
      "string"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-scroll-column-right": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Scrolls the window COUNT columns to the right.",
    "arglist": [
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-set-initial-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Set the initial state for major mode MODE to STATE.\nThis is the state the buffer comes up in.",
    "arglist": [
      "mode",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-command-completion-at-point": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-echo-area-message": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Previous value of `current-message'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-stop-session": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Stop interactive search.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-kbd-macro-suppress-motion-error": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "\\<evil-motion-state-map>\nWhether left/right motions signal errors in keyboard macros.\nThis variable only affects beginning-of-line or end-of-line errors\nregarding the motions \\[evil-backward-char] and \\[evil-forward-char]\nrespectively.  This may be desired since such errors cause macro\ndefinition or execution to be terminated.  There are four\npossibilities:\n\n- `record': errors are suppressed when recording macros, but not when\n  replaying them.\n- `replay': errors are suppressed when replaying macros, but not when\n  recording them.\n- `t': errors are suppressed in both cases.\n- `nil': errors are never suppressed.",
    "fn-docstring": "Returns non-nil if a motion error should be suppressed.\nWhether the motion error should be suppressed depends on the\nvariable `evil-kbd-macro-suppress-motion-error'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-keystrokes": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Repeation recording function for commands that are repeated by keystrokes.",
    "arglist": [
      "flag"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-state-intercept-keymaps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a keymap alist of intercept keymaps for STATE.",
    "arglist": [
      "&optional",
      "state"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-command-window-search-execute": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for RESULT using FORWARD to determine direction.",
    "arglist": [
      "result",
      "forward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-list-view-quit": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": null,
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-eolp": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Like `eolp' but accounts for `evil-move-beyond-eol' being nil.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-visual-selection": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "The kind of Visual selection.\nThis is a selection as defined by `evil-define-visual-selection'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-line-or-visual-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move COUNT - 1 lines down.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-state-alist": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "For Each evil state the Evil state being switched from.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-operator-range-end": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "End of `evil-operator-range'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-last-was-search": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Non-nil if the previous was a search.\nOtherwise the previous command is assumed as substitute.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-align-center": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Centers lines in the region between WIDTH columns.\nThe default for width is the value of `fill-column'.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "width"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-this-macro": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Current macro register.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-fill": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Fill text.",
    "arglist": [
      "beg",
      "end"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-previous-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move the cursor COUNT lines up.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-avy-goto-char-2-below": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-char-2-below'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-current-buffer": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "The buffer from which Ex was started.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-forward-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move cursor to the right by COUNT characters.\nMovement is restricted to the current line unless CROSSLINES is non-nil.\nIf NOERROR is non-nil, don't signal an error upon reaching the end\nof the line or the buffer; just return nil.",
    "arglist": [
      "&optional",
      "count",
      "crosslines",
      "noerror"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-pending-overriding-maps": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "An alist of pending overriding maps.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-fold-list": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Actions to be performed for various folding operations.\n\nThe value should be a list of fold handlers, were a fold handler has\nthe format:\n\n  ((MODES) PROPERTIES)\n\nMODES acts as a predicate, containing the symbols of all major or\nminor modes for which the handler should match.  For example:\n\n  '((outline-minor-mode org-mode) ...)\n\nwould match for either outline-minor-mode or org-mode, even though the\nformer is a minor mode and the latter is a major.\n\nPROPERTIES specifies possible folding actions and the functions to be\napplied in the event of a match on one (or more) of the MODES; the\nsupported properties are:\n\n  - `:open-all'\n    Open all folds.\n  - `:close-all'\n    Close all folds.\n  - `:toggle'\n    Toggle the display of the fold at point.\n  - `:open'\n    Open the fold at point.\n  - `:open-rec'\n    Open the fold at point recursively.\n  - `:close'\n    Close the fold at point.\n\nEach value must be a function.  A value of `nil' will cause the action\nto be ignored for that respective handler.  For example:\n\n  `((org-mode)\n     :close-all  nil\n     :open       ,(lambda ()\n                    (show-entry)\n                    (show-children))\n     :close      hide-subtree)\n\nwould ignore `:close-all' actions and invoke the provided functions on\n`:open' or `:close'.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delimited-arguments": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Parse STRING as a sequence of delimited arguments.\nReturns a list of NUM strings, or as many arguments as\nthe string contains. The first non-blank character is\ntaken to be the delimiter. If some arguments are missing\nfrom STRING, the resulting list is padded with nil values.\nTwo delimiters following directly after each other gives\nan empty string.",
    "arglist": [
      "string",
      "&optional",
      "num"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-backward-paragraph": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the beginning of the COUNT-th previous paragraph.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-compile-subreplacement": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Convert a regexp replacement TO to Lisp from START until \\e or \\E.\nReturns a pair (RESULT . REST). RESULT is a list suitable for\n`perform-replace' if necessary, the original string if not.\nREST is the unparsed remainder of TO.",
    "arglist": [
      "to",
      "&optional",
      "start"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-commands": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Association list of command bindings and functions.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-define-visual-selection": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Define a Visual selection SELECTION.\nCreates a command evil-visual-SELECTION for enabling the selection.\nDOC is the function's documentation string. The following keywords\nmay be specified in BODY:\n\n:message STRING         Status message when enabling the selection.\n:type TYPE              Type to use (defaults to SELECTION).\n\nFollowing the keywords is optional code which is executed each time\nthe selection is enabled.\n\n(fn SELECTION DOC [[KEY VAL]...] BODY...)",
    "arglist": [
      "selection",
      "doc",
      "&rest",
      "body"
    ],
    "functionp": null,
    "macrop": true,
    "keymap-inv": null
  },
  "evil-avy-goto-symbol-1-above": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Evil motion for `avy-goto-symbol-1-above'.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-no-display": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "If non-nil, various Evil displays are inhibited.\nUse the macro `evil-without-display' to set this variable.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-activate-input-method": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable input method in states with :input-method non-nil.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-select-quote": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a range (BEG END) of COUNT quoted text objects.\nQUOTE specifies the quotation delimiter. BEG END TYPE are the\ncurrently selected (visual) range.\n\nIf INCLUSIVE is nil the previous selection is ignore. If there is\nquoted string at point this object will be selected, otherwise\nthe following (if (> COUNT 0)) or preceeding object (if (< COUNT\n0)) is selected. If (/= (abs COUNT) 2) the delimiting quotes are not\ncontained in the range, otherwise they are contained in the range.\n\nIf INCLUSIVE is non-nil the selection depends on the previous\nselection. If the currently selection contains at least one\ncharacter that is contained in a quoted string then the selection\nis extended, otherwise it is thrown away. If there is a\nnon-selected object at point then this object is added to the\nselection. Otherwise the selection is extended to the\nfollowing (if (> COUNT 0)) or preceeding object (if (< COUNT\n0)). Any whitespace following (or preceeding if (< COUNT 0)) the\nnew selection is added to the selection. If no such whitespace\nexists and the selection contains only one quoted string then the\npreceeding (or following) whitespace is added to the range. ",
    "arglist": [
      "quote",
      "beg",
      "end",
      "type",
      "count",
      "&optional",
      "inclusive"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-find-thing": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a THING near point as a string.\nTHING should be a symbol understood by `thing-at-point',\ne.g. 'symbol or 'word.  If FORWARD is nil, search backward,\notherwise forward.  Returns nil if nothing is found.",
    "arglist": [
      "forward",
      "thing"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-motion-marker": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Marker for storing the starting position of a motion.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-shift-width": {
    "default": 4,
    "local": true,
    "default-type": "integer",
    "var-docstring": "\\<evil-normal-state-map>\nThe number of columns by which a line is shifted.\nThis applies to the shifting operators \\[evil-shift-right] and \\[evil-shift-left].",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-goto-line": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Go to line COUNT. By default the last line.",
    "arglist": [
      "&optional",
      "count"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-delete-hl": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Remove the highlighting object with a certain NAME.",
    "arglist": [
      "name"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-search-unbounded-word-backward": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Search for the next occurrence of word under the cursor.",
    "arglist": [
      "&optional",
      "count",
      "symbol"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-repeat-find-to-skip-next": {
    "default": "t",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Whether a repeat of t or T should skip an adjacent character.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-restore-transient-mark-mode": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Restore Transient Mark mode.\nThis presupposes that `evil-save-transient-mark-mode' has been\ncalled earlier. If Transient Mark mode was disabled before but\nenabled in the meantime, this function disables it; if it was\nenabled before but disabled in the meantime, this function\nenables it.\n\nThe earlier settings of Transient Mark mode are stored in\n`evil-transient-vals'.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-signed-number": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Return a signed number like -3 and +1.\nNUMBER defaults to 1.",
    "arglist": [
      "sign",
      "&optional",
      "number"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-emacs-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Emacs state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-mouse-drag-track": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Track mouse drags by highlighting area between point and cursor.\nThe region will be defined with mark and point.\nDO-MOUSE-DRAG-REGION-POST-PROCESS should only be used by\n`mouse-drag-region'.",
    "arglist": [
      "start-event",
      "&optional",
      "do-mouse-drag-region-post-process"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-signal-at-eob": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Signals 'end-of-buffer if `point' is at eob.\nThis function should be used in forward motions. If `point' is close\nto eob so that no further forward motion is possible the error\n'end-of-buffer is raised. This is the case if `point' is at\n`point-max' or if is one position before `point-max',\n`evil-move-beyond-eol' is nil and `point' is not at the end\nof a line. The latter is necessary because `point' cannot be\nmoved to `point-max' if `evil-move-beyond-eol' is nil and\nthe last line in the buffer is not empty.",
    "arglist": null,
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-state": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Enable Insert state. Disable with negative ARG.\nIf ARG is nil, don't display a message in the echo area.",
    "arglist": [
      "&optional",
      "arg"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-move-beginning": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Move to the beginning of the COUNT next object.\nIf COUNT is negative, move to the COUNT previous object.\nFORWARD is a function which moves to the end of the object, and\nBACKWARD is a function which moves to the beginning.\nIf one is unspecified, the other is used with a negative argument.",
    "arglist": [
      "count",
      "forward",
      "&optional",
      "backward"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-insert-repeat-info": {
    "default": "nil",
    "local": true,
    "default-type": "symbol",
    "var-docstring": "Repeat information accumulated during an insertion.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-replace-state-cursor": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "Cursor for Replace state.\nMay be a cursor type as per `cursor-type', a color string as passed\nto `set-cursor-color', a zero-argument function for changing the\ncursor, or a list of the above.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-delete-char": {
    "default": "nil",
    "local": null,
    "default-type": "symbol",
    "var-docstring": null,
    "fn-docstring": "Delete next character.",
    "arglist": [
      "beg",
      "end",
      "&optional",
      "type",
      "register"
    ],
    "functionp": true,
    "macrop": null,
    "keymap-inv": null
  },
  "evil-ex-complete-emacs-commands": {
    "default": "in-turn",
    "local": null,
    "default-type": "symbol",
    "var-docstring": "TAB-completion for Emacs commands in ex command line.\nThis variable determines when Emacs commands are considered for\ncompletion, always, never, or only if no Evil ex command is\navailable for completion.",
    "fn-docstring": null,
    "arglist": true,
    "functionp": null,
    "macrop": null,
    "keymap-inv": null
  }
}